-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity mse_ap_fixed_16_6_0_0_0_mse_config_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ap_ce : IN STD_LOGIC;
    predictions_0_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
    predictions_1_V_read : IN STD_LOGIC_VECTOR (0 downto 0);
    ground_truth_V_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    ground_truth_V_ce0 : OUT STD_LOGIC;
    ground_truth_V_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    ground_truth_V_address1 : OUT STD_LOGIC_VECTOR (0 downto 0);
    ground_truth_V_ce1 : OUT STD_LOGIC;
    ground_truth_V_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of mse_ap_fixed_16_6_0_0_0_mse_config_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv16_7FFF : STD_LOGIC_VECTOR (15 downto 0) := "0111111111111111";
    constant ap_const_lv16_8000 : STD_LOGIC_VECTOR (15 downto 0) := "1000000000000000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv5_1F : STD_LOGIC_VECTOR (4 downto 0) := "11111";
    constant ap_const_lv6_3F : STD_LOGIC_VECTOR (5 downto 0) := "111111";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal predictions_1_V_read_1_reg_915 : STD_LOGIC_VECTOR (0 downto 0);
    signal predictions_0_V_read_1_reg_920 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln1118_fu_897_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln1118_reg_935 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_6_reg_941 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln2_reg_947 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_8_reg_952 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_957 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_2_reg_962 : STD_LOGIC_VECTOR (5 downto 0);
    signal mul_ln1118_1_fu_908_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln1118_1_reg_968 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_14_reg_973 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln415_1_fu_486_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln415_1_reg_978 : STD_LOGIC_VECTOR (15 downto 0);
    signal and_ln781_2_fu_594_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln781_2_reg_984 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln785_5_fu_612_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln785_5_reg_989 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln786_4_fu_624_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln786_4_reg_994 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln786_5_fu_642_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln786_5_reg_999 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln340_6_fu_648_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln340_6_reg_1004 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal sext_ln703_fu_104_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln703_1_fu_108_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal sub_ln1193_fu_111_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal tmp_5_fu_129_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_4_fu_117_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln786_fu_137_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln340_fu_155_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln340_1_fu_149_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln703_fu_125_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal and_ln786_1_fu_143_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln340_fu_161_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln340_fu_167_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln388_fu_175_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln39_fu_101_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln340_2_fu_183_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal sub_ln1193_1_fu_191_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln415_fu_260_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln415_fu_263_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_9_fu_268_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_7_fu_253_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln416_1_fu_276_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln416_fu_282_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln879_1_fu_301_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln768_fu_306_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_11_fu_319_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln879_fu_296_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln779_fu_326_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln779_fu_332_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln777_fu_311_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_10_fu_288_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln785_fu_352_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln785_fu_358_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln785_3_fu_364_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln416_fu_338_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln781_1_fu_346_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln786_2_fu_375_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln786_fu_381_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln786_1_fu_387_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln786_3_fu_393_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln785_fu_369_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln340_2_fu_404_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln340_1_fu_398_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln340_5_fu_410_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln340_3_fu_416_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln388_2_fu_424_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln340_5_fu_432_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal shl_ln_fu_440_p3 : STD_LOGIC_VECTOR (25 downto 0);
    signal sext_ln728_fu_448_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln1192_fu_452_p2 : STD_LOGIC_VECTOR (31 downto 0);
    attribute use_dsp48 : string;
    attribute use_dsp48 of add_ln1192_fu_452_p2 : signal is "no";
    signal trunc_ln708_1_fu_465_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln415_1_fu_483_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_15_fu_492_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_13_fu_475_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln416_2_fu_500_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_fu_520_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_3_fu_536_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal and_ln416_1_fu_506_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln879_3_fu_546_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln768_1_fu_552_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_17_fu_566_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln879_2_fu_530_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln779_1_fu_574_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln779_1_fu_580_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln777_1_fu_558_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_16_fu_512_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln785_4_fu_600_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_12_fu_457_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln785_1_fu_606_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln416_1_fu_586_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln786_1_fu_630_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln786_2_fu_636_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln785_1_fu_618_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln340_7_fu_654_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln340_8_fu_658_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln340_4_fu_663_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln388_3_fu_669_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln340_6_fu_675_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln708_2_fu_695_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal trunc_ln1118_fu_683_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_s_fu_705_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln415_2_fu_717_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_1_fu_721_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_20_fu_727_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_1_fu_709_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln416_3_fu_735_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_23_fu_763_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln416_4_fu_777_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln416_1_fu_783_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln779_2_fu_771_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal carry_1_fu_741_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal Range2_all_ones_fu_755_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_2_fu_747_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln785_1_fu_801_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_s_fu_687_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln785_2_fu_807_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln785_2_fu_813_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln416_fu_789_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln786_6_fu_825_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln781_fu_795_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln786_fu_831_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln786_2_fu_837_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln786_3_fu_843_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_fu_849_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal overflow_fu_819_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln340_9_fu_861_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln340_3_fu_855_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln340_4_fu_867_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln340_1_fu_873_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln388_1_fu_881_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln1118_fu_897_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln1116_fu_197_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln1118_fu_897_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln1118_1_fu_908_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln1116_1_fu_242_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln1118_1_fu_908_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_idle_pp0_0to2 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;

    component myproject_mul_mul_16s_16s_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    myproject_mul_mul_16s_16s_32_1_1_U3 : component myproject_mul_mul_16s_16s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        din0 => mul_ln1118_fu_897_p0,
        din1 => mul_ln1118_fu_897_p1,
        dout => mul_ln1118_fu_897_p2);

    myproject_mul_mul_16s_16s_32_1_1_U4 : component myproject_mul_mul_16s_16s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        din0 => mul_ln1118_1_fu_908_p0,
        din1 => mul_ln1118_1_fu_908_p1,
        dout => mul_ln1118_1_fu_908_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;

    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                add_ln415_1_reg_978 <= add_ln415_1_fu_486_p2;
                and_ln781_2_reg_984 <= and_ln781_2_fu_594_p2;
                and_ln786_4_reg_994 <= and_ln786_4_fu_624_p2;
                and_ln786_5_reg_999 <= and_ln786_5_fu_642_p2;
                or_ln340_6_reg_1004 <= or_ln340_6_fu_648_p2;
                xor_ln785_5_reg_989 <= xor_ln785_5_fu_612_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                mul_ln1118_1_reg_968 <= mul_ln1118_1_fu_908_p2;
                mul_ln1118_reg_935 <= mul_ln1118_fu_897_p2;
                predictions_0_V_read_1_reg_920 <= predictions_0_V_read;
                predictions_1_V_read_1_reg_915 <= predictions_1_V_read;
                tmp_14_reg_973 <= mul_ln1118_1_fu_908_p2(9 downto 9);
                tmp_2_reg_962 <= mul_ln1118_fu_897_p2(31 downto 26);
                tmp_6_reg_941 <= mul_ln1118_fu_897_p2(31 downto 31);
                tmp_8_reg_952 <= mul_ln1118_fu_897_p2(9 downto 9);
                tmp_reg_957 <= mul_ln1118_fu_897_p2(31 downto 27);
                trunc_ln2_reg_947 <= mul_ln1118_fu_897_p2(25 downto 10);
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    Range2_all_ones_fu_755_p3 <= select_ln340_6_fu_675_p3(15 downto 15);
    add_ln1192_fu_452_p2 <= std_logic_vector(signed(mul_ln1118_1_reg_968) + signed(sext_ln728_fu_448_p1));
    add_ln415_1_fu_486_p2 <= std_logic_vector(unsigned(trunc_ln708_1_fu_465_p4) + unsigned(zext_ln415_1_fu_483_p1));
    add_ln415_fu_263_p2 <= std_logic_vector(unsigned(zext_ln415_fu_260_p1) + unsigned(trunc_ln2_reg_947));
    and_ln416_1_fu_506_p2 <= (xor_ln416_2_fu_500_p2 and tmp_13_fu_475_p3);
    and_ln416_fu_282_p2 <= (xor_ln416_1_fu_276_p2 and tmp_7_fu_253_p3);
    and_ln779_1_fu_580_p2 <= (xor_ln779_1_fu_574_p2 and icmp_ln879_2_fu_530_p2);
    and_ln779_fu_332_p2 <= (xor_ln779_fu_326_p2 and icmp_ln879_fu_296_p2);
    and_ln781_1_fu_346_p2 <= (icmp_ln879_1_fu_301_p2 and and_ln416_fu_282_p2);
    and_ln781_2_fu_594_p2 <= (icmp_ln879_3_fu_546_p2 and and_ln416_1_fu_506_p2);
    and_ln781_fu_795_p2 <= (carry_1_fu_741_p2 and Range2_all_ones_fu_755_p3);
    and_ln785_1_fu_618_p2 <= (xor_ln785_5_fu_612_p2 and or_ln785_1_fu_606_p2);
    and_ln785_fu_369_p2 <= (xor_ln785_3_fu_364_p2 and or_ln785_fu_358_p2);
    and_ln786_1_fu_143_p2 <= (xor_ln786_fu_137_p2 and tmp_4_fu_117_p3);
    and_ln786_2_fu_375_p2 <= (tmp_10_fu_288_p3 and select_ln416_fu_338_p3);
    and_ln786_3_fu_393_p2 <= (xor_ln786_1_fu_387_p2 and tmp_6_reg_941);
    and_ln786_4_fu_624_p2 <= (tmp_16_fu_512_p3 and select_ln416_1_fu_586_p3);
    and_ln786_5_fu_642_p2 <= (xor_ln786_2_fu_636_p2 and tmp_12_fu_457_p3);
    and_ln786_6_fu_825_p2 <= (p_Result_2_fu_747_p3 and or_ln416_fu_789_p2);
    and_ln786_fu_831_p2 <= (and_ln786_6_fu_825_p2 and Range2_all_ones_fu_755_p3);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(ap_start)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_start = ap_const_logic_0) and (ap_start = ap_const_logic_1));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_start, ap_ce)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_const_logic_0 = ap_ce) or ((ap_start = ap_const_logic_0) and (ap_start = ap_const_logic_1)));
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_start)
    begin
                ap_block_state1_pp0_stage0_iter0 <= (ap_start = ap_const_logic_0);
    end process;

        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_enable_reg_pp0_iter3, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start;

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_idle_pp0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to2_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0_0to2 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_idle_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to2)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0_0to2 = ap_const_logic_1))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= 
        select_ln340_1_fu_873_p3 when (or_ln340_4_fu_867_p2(0) = '1') else 
        select_ln388_1_fu_881_p3;
    carry_1_fu_741_p2 <= (xor_ln416_3_fu_735_p2 and p_Result_1_fu_709_p3);
    ground_truth_V_address0 <= ap_const_lv64_0(1 - 1 downto 0);
    ground_truth_V_address1 <= ap_const_lv64_1(1 - 1 downto 0);

    ground_truth_V_ce0_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ground_truth_V_ce0 <= ap_const_logic_1;
        else 
            ground_truth_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    ground_truth_V_ce1_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_ce)
    begin
        if (((ap_const_logic_1 = ap_ce) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ground_truth_V_ce1 <= ap_const_logic_1;
        else 
            ground_truth_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    icmp_ln768_1_fu_552_p2 <= "1" when (tmp_3_fu_536_p4 = ap_const_lv6_0) else "0";
    icmp_ln768_fu_306_p2 <= "1" when (tmp_2_reg_962 = ap_const_lv6_0) else "0";
    icmp_ln879_1_fu_301_p2 <= "1" when (tmp_2_reg_962 = ap_const_lv6_3F) else "0";
    icmp_ln879_2_fu_530_p2 <= "1" when (tmp_1_fu_520_p4 = ap_const_lv5_1F) else "0";
    icmp_ln879_3_fu_546_p2 <= "1" when (tmp_3_fu_536_p4 = ap_const_lv6_3F) else "0";
    icmp_ln879_fu_296_p2 <= "1" when (tmp_reg_957 = ap_const_lv5_1F) else "0";
    mul_ln1118_1_fu_908_p0 <= sext_ln1116_1_fu_242_p1(16 - 1 downto 0);
    mul_ln1118_1_fu_908_p1 <= sext_ln1116_1_fu_242_p1(16 - 1 downto 0);
    mul_ln1118_fu_897_p0 <= sext_ln1116_fu_197_p1(16 - 1 downto 0);
    mul_ln1118_fu_897_p1 <= sext_ln1116_fu_197_p1(16 - 1 downto 0);
    or_ln340_1_fu_398_p2 <= (and_ln786_3_fu_393_p2 or and_ln785_fu_369_p2);
    or_ln340_2_fu_404_p2 <= (xor_ln785_3_fu_364_p2 or and_ln786_2_fu_375_p2);
    or_ln340_3_fu_855_p2 <= (underflow_fu_849_p2 or overflow_fu_819_p2);
    or_ln340_4_fu_867_p2 <= (or_ln340_9_fu_861_p2 or and_ln781_fu_795_p2);
    or_ln340_5_fu_410_p2 <= (or_ln340_2_fu_404_p2 or and_ln781_1_fu_346_p2);
    or_ln340_6_fu_648_p2 <= (and_ln786_5_fu_642_p2 or and_ln785_1_fu_618_p2);
    or_ln340_7_fu_654_p2 <= (xor_ln785_5_reg_989 or and_ln786_4_reg_994);
    or_ln340_8_fu_658_p2 <= (or_ln340_7_fu_654_p2 or and_ln781_2_reg_984);
    or_ln340_9_fu_861_p2 <= (xor_ln785_2_fu_813_p2 or and_ln786_fu_831_p2);
    or_ln340_fu_161_p2 <= (xor_ln340_fu_155_p2 or tmp_5_fu_129_p3);
    or_ln416_1_fu_783_p2 <= (xor_ln416_4_fu_777_p2 or tmp_20_fu_727_p3);
    or_ln416_fu_789_p2 <= (xor_ln779_2_fu_771_p2 or or_ln416_1_fu_783_p2);
    or_ln785_1_fu_606_p2 <= (xor_ln785_4_fu_600_p2 or tmp_16_fu_512_p3);
    or_ln785_2_fu_807_p2 <= (xor_ln785_1_fu_801_p2 or p_Result_2_fu_747_p3);
    or_ln785_fu_358_p2 <= (xor_ln785_fu_352_p2 or tmp_10_fu_288_p3);
    or_ln786_1_fu_630_p2 <= (and_ln786_4_fu_624_p2 or and_ln781_2_fu_594_p2);
    or_ln786_2_fu_837_p2 <= (and_ln786_fu_831_p2 or and_ln781_fu_795_p2);
    or_ln786_fu_381_p2 <= (and_ln786_2_fu_375_p2 or and_ln781_1_fu_346_p2);
    overflow_fu_819_p2 <= (xor_ln785_2_fu_813_p2 and or_ln785_2_fu_807_p2);
    p_Result_1_fu_709_p3 <= select_ln340_6_fu_675_p3(15 downto 15);
    p_Result_2_fu_747_p3 <= p_Val2_1_fu_721_p2(15 downto 15);
    p_Result_s_fu_687_p3 <= select_ln340_6_fu_675_p3(15 downto 15);
    p_Val2_1_fu_721_p2 <= std_logic_vector(signed(p_Val2_s_fu_705_p1) + signed(zext_ln415_2_fu_717_p1));
        p_Val2_s_fu_705_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln708_2_fu_695_p4),16));

    select_ln340_1_fu_873_p3 <= 
        ap_const_lv16_7FFF when (or_ln340_3_fu_855_p2(0) = '1') else 
        p_Val2_1_fu_721_p2;
    select_ln340_2_fu_183_p3 <= 
        select_ln340_fu_167_p3 when (or_ln340_fu_161_p2(0) = '1') else 
        select_ln388_fu_175_p3;
    select_ln340_3_fu_416_p3 <= 
        ap_const_lv16_7FFF when (or_ln340_1_fu_398_p2(0) = '1') else 
        add_ln415_fu_263_p2;
    select_ln340_4_fu_663_p3 <= 
        ap_const_lv16_7FFF when (or_ln340_6_reg_1004(0) = '1') else 
        add_ln415_1_reg_978;
    select_ln340_5_fu_432_p3 <= 
        select_ln340_3_fu_416_p3 when (or_ln340_5_fu_410_p2(0) = '1') else 
        select_ln388_2_fu_424_p3;
    select_ln340_6_fu_675_p3 <= 
        select_ln340_4_fu_663_p3 when (or_ln340_8_fu_658_p2(0) = '1') else 
        select_ln388_3_fu_669_p3;
    select_ln340_fu_167_p3 <= 
        ap_const_lv16_7FFF when (xor_ln340_1_fu_149_p2(0) = '1') else 
        trunc_ln703_fu_125_p1;
    select_ln388_1_fu_881_p3 <= 
        ap_const_lv16_8000 when (underflow_fu_849_p2(0) = '1') else 
        p_Val2_1_fu_721_p2;
    select_ln388_2_fu_424_p3 <= 
        ap_const_lv16_8000 when (and_ln786_3_fu_393_p2(0) = '1') else 
        add_ln415_fu_263_p2;
    select_ln388_3_fu_669_p3 <= 
        ap_const_lv16_8000 when (and_ln786_5_reg_999(0) = '1') else 
        add_ln415_1_reg_978;
    select_ln388_fu_175_p3 <= 
        ap_const_lv16_8000 when (and_ln786_1_fu_143_p2(0) = '1') else 
        trunc_ln703_fu_125_p1;
    select_ln416_1_fu_586_p3 <= 
        and_ln779_1_fu_580_p2 when (and_ln416_1_fu_506_p2(0) = '1') else 
        icmp_ln879_3_fu_546_p2;
    select_ln416_fu_338_p3 <= 
        and_ln779_fu_332_p2 when (and_ln416_fu_282_p2(0) = '1') else 
        icmp_ln879_1_fu_301_p2;
    select_ln777_1_fu_558_p3 <= 
        icmp_ln879_3_fu_546_p2 when (and_ln416_1_fu_506_p2(0) = '1') else 
        icmp_ln768_1_fu_552_p2;
    select_ln777_fu_311_p3 <= 
        icmp_ln879_1_fu_301_p2 when (and_ln416_fu_282_p2(0) = '1') else 
        icmp_ln768_fu_306_p2;
        sext_ln1116_1_fu_242_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln1193_1_fu_191_p2),32));

        sext_ln1116_fu_197_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(select_ln340_2_fu_183_p3),32));

        sext_ln703_1_fu_108_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(predictions_0_V_read_1_reg_920),17));

        sext_ln703_fu_104_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(ground_truth_V_q0),17));

        sext_ln728_fu_448_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln_fu_440_p3),32));

    shl_ln_fu_440_p3 <= (select_ln340_5_fu_432_p3 & ap_const_lv10_0);
    sub_ln1193_1_fu_191_p2 <= std_logic_vector(unsigned(ground_truth_V_q1) - unsigned(zext_ln39_fu_101_p1));
    sub_ln1193_fu_111_p2 <= std_logic_vector(signed(sext_ln703_fu_104_p1) - signed(sext_ln703_1_fu_108_p1));
    tmp_10_fu_288_p3 <= add_ln415_fu_263_p2(15 downto 15);
    tmp_11_fu_319_p3 <= mul_ln1118_reg_935(26 downto 26);
    tmp_12_fu_457_p3 <= add_ln1192_fu_452_p2(31 downto 31);
    tmp_13_fu_475_p3 <= add_ln1192_fu_452_p2(25 downto 25);
    tmp_15_fu_492_p3 <= add_ln415_1_fu_486_p2(15 downto 15);
    tmp_16_fu_512_p3 <= add_ln415_1_fu_486_p2(15 downto 15);
    tmp_17_fu_566_p3 <= add_ln1192_fu_452_p2(26 downto 26);
    tmp_1_fu_520_p4 <= add_ln1192_fu_452_p2(31 downto 27);
    tmp_20_fu_727_p3 <= p_Val2_1_fu_721_p2(15 downto 15);
    tmp_23_fu_763_p3 <= select_ln340_6_fu_675_p3(15 downto 15);
    tmp_3_fu_536_p4 <= add_ln1192_fu_452_p2(31 downto 26);
    tmp_4_fu_117_p3 <= sub_ln1193_fu_111_p2(16 downto 16);
    tmp_5_fu_129_p3 <= sub_ln1193_fu_111_p2(15 downto 15);
    tmp_7_fu_253_p3 <= mul_ln1118_reg_935(25 downto 25);
    tmp_9_fu_268_p3 <= add_ln415_fu_263_p2(15 downto 15);
    trunc_ln1118_fu_683_p1 <= select_ln340_6_fu_675_p3(1 - 1 downto 0);
    trunc_ln703_fu_125_p1 <= sub_ln1193_fu_111_p2(16 - 1 downto 0);
    trunc_ln708_1_fu_465_p4 <= add_ln1192_fu_452_p2(25 downto 10);
    trunc_ln708_2_fu_695_p4 <= select_ln340_6_fu_675_p3(15 downto 1);
    underflow_fu_849_p2 <= (xor_ln786_3_fu_843_p2 and p_Result_s_fu_687_p3);
    xor_ln340_1_fu_149_p2 <= (tmp_5_fu_129_p3 xor tmp_4_fu_117_p3);
    xor_ln340_fu_155_p2 <= (tmp_4_fu_117_p3 xor ap_const_lv1_1);
    xor_ln416_1_fu_276_p2 <= (tmp_9_fu_268_p3 xor ap_const_lv1_1);
    xor_ln416_2_fu_500_p2 <= (tmp_15_fu_492_p3 xor ap_const_lv1_1);
    xor_ln416_3_fu_735_p2 <= (tmp_20_fu_727_p3 xor ap_const_lv1_1);
    xor_ln416_4_fu_777_p2 <= (p_Result_1_fu_709_p3 xor ap_const_lv1_1);
    xor_ln779_1_fu_574_p2 <= (tmp_17_fu_566_p3 xor ap_const_lv1_1);
    xor_ln779_2_fu_771_p2 <= (tmp_23_fu_763_p3 xor ap_const_lv1_1);
    xor_ln779_fu_326_p2 <= (tmp_11_fu_319_p3 xor ap_const_lv1_1);
    xor_ln785_1_fu_801_p2 <= (carry_1_fu_741_p2 xor Range2_all_ones_fu_755_p3);
    xor_ln785_2_fu_813_p2 <= (p_Result_s_fu_687_p3 xor ap_const_lv1_1);
    xor_ln785_3_fu_364_p2 <= (tmp_6_reg_941 xor ap_const_lv1_1);
    xor_ln785_4_fu_600_p2 <= (select_ln777_1_fu_558_p3 xor ap_const_lv1_1);
    xor_ln785_5_fu_612_p2 <= (tmp_12_fu_457_p3 xor ap_const_lv1_1);
    xor_ln785_fu_352_p2 <= (select_ln777_fu_311_p3 xor ap_const_lv1_1);
    xor_ln786_1_fu_387_p2 <= (or_ln786_fu_381_p2 xor ap_const_lv1_1);
    xor_ln786_2_fu_636_p2 <= (or_ln786_1_fu_630_p2 xor ap_const_lv1_1);
    xor_ln786_3_fu_843_p2 <= (or_ln786_2_fu_837_p2 xor ap_const_lv1_1);
    xor_ln786_fu_137_p2 <= (tmp_5_fu_129_p3 xor ap_const_lv1_1);
    zext_ln39_fu_101_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(predictions_1_V_read_1_reg_915),16));
    zext_ln415_1_fu_483_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_14_reg_973),16));
    zext_ln415_2_fu_717_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln1118_fu_683_p1),16));
    zext_ln415_fu_260_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_8_reg_952),16));
end behav;
