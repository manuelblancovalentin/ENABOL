-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity myproject is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    fc1_input_V : IN STD_LOGIC_VECTOR (15 downto 0);
    fc1_input_V_ap_vld : IN STD_LOGIC;
    layer3_out_0_V : OUT STD_LOGIC_VECTOR (15 downto 0);
    layer3_out_0_V_ap_vld : OUT STD_LOGIC;
    const_size_in_1 : OUT STD_LOGIC_VECTOR (15 downto 0);
    const_size_in_1_ap_vld : OUT STD_LOGIC;
    const_size_out_1 : OUT STD_LOGIC_VECTOR (15 downto 0);
    const_size_out_1_ap_vld : OUT STD_LOGIC );
end;


architecture behav of myproject is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "myproject,hls_ip_2019_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xcu250-figd2104-2L-e,HLS_INPUT_CLOCK=5.000000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=0.000000,HLS_SYN_LAT=0,HLS_SYN_TPT=1,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=18,HLS_SYN_LUT=38,HLS_VERSION=2019_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal fc1_input_V_preg : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal fc1_input_V_in_sig : STD_LOGIC_VECTOR (15 downto 0);
    signal fc1_input_V_ap_vld_preg : STD_LOGIC := '0';
    signal fc1_input_V_ap_vld_in_sig : STD_LOGIC;
    signal fc1_input_V_blk_n : STD_LOGIC;
    signal layer2_out_0_V_dense_latency_ap_fixed_ap_fixed_config2_0_0_fu_69_ap_ready : STD_LOGIC;
    signal layer2_out_0_V_dense_latency_ap_fixed_ap_fixed_config2_0_0_fu_69_ap_return : STD_LOGIC_VECTOR (14 downto 0);
    signal call_ret6_linear_ap_fixed_ap_fixed_16_6_0_0_0_linear_config3_s_fu_75_ap_ready : STD_LOGIC;
    signal call_ret6_linear_ap_fixed_ap_fixed_16_6_0_0_0_linear_config3_s_fu_75_ap_return : STD_LOGIC_VECTOR (14 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);

    component dense_latency_ap_fixed_ap_fixed_config2_0_0 IS
    port (
        ap_ready : OUT STD_LOGIC;
        data_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (14 downto 0) );
    end component;


    component linear_ap_fixed_ap_fixed_16_6_0_0_0_linear_config3_s IS
    port (
        ap_ready : OUT STD_LOGIC;
        data_V_read : IN STD_LOGIC_VECTOR (14 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (14 downto 0) );
    end component;



begin
    layer2_out_0_V_dense_latency_ap_fixed_ap_fixed_config2_0_0_fu_69 : component dense_latency_ap_fixed_ap_fixed_config2_0_0
    port map (
        ap_ready => layer2_out_0_V_dense_latency_ap_fixed_ap_fixed_config2_0_0_fu_69_ap_ready,
        data_V_read => fc1_input_V_in_sig,
        ap_return => layer2_out_0_V_dense_latency_ap_fixed_ap_fixed_config2_0_0_fu_69_ap_return);

    call_ret6_linear_ap_fixed_ap_fixed_16_6_0_0_0_linear_config3_s_fu_75 : component linear_ap_fixed_ap_fixed_16_6_0_0_0_linear_config3_s
    port map (
        ap_ready => call_ret6_linear_ap_fixed_ap_fixed_16_6_0_0_0_linear_config3_s_fu_75_ap_ready,
        data_V_read => layer2_out_0_V_dense_latency_ap_fixed_ap_fixed_config2_0_0_fu_69_ap_return,
        ap_return => call_ret6_linear_ap_fixed_ap_fixed_16_6_0_0_0_linear_config3_s_fu_75_ap_return);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    fc1_input_V_ap_vld_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                fc1_input_V_ap_vld_preg <= ap_const_logic_0;
            else
                if ((not(((ap_start = ap_const_logic_0) or (fc1_input_V_ap_vld_in_sig = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    fc1_input_V_ap_vld_preg <= ap_const_logic_0;
                elsif ((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (fc1_input_V_ap_vld = ap_const_logic_1))) then 
                    fc1_input_V_ap_vld_preg <= fc1_input_V_ap_vld;
                end if; 
            end if;
        end if;
    end process;


    fc1_input_V_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                fc1_input_V_preg <= ap_const_lv16_0;
            else
                if ((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (fc1_input_V_ap_vld = ap_const_logic_1))) then 
                    fc1_input_V_preg <= fc1_input_V;
                end if; 
            end if;
        end if;
    end process;


    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, fc1_input_V_ap_vld_in_sig)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);

    ap_block_state1_assign_proc : process(ap_start, fc1_input_V_ap_vld_in_sig)
    begin
                ap_block_state1 <= ((ap_start = ap_const_logic_0) or (fc1_input_V_ap_vld_in_sig = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, fc1_input_V_ap_vld_in_sig)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (fc1_input_V_ap_vld_in_sig = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_start, ap_CS_fsm_state1, fc1_input_V_ap_vld_in_sig)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (fc1_input_V_ap_vld_in_sig = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    const_size_in_1 <= ap_const_lv16_1;

    const_size_in_1_ap_vld_assign_proc : process(ap_start, ap_CS_fsm_state1, fc1_input_V_ap_vld_in_sig)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (fc1_input_V_ap_vld_in_sig = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            const_size_in_1_ap_vld <= ap_const_logic_1;
        else 
            const_size_in_1_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    const_size_out_1 <= ap_const_lv16_1;

    const_size_out_1_ap_vld_assign_proc : process(ap_start, ap_CS_fsm_state1, fc1_input_V_ap_vld_in_sig)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (fc1_input_V_ap_vld_in_sig = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            const_size_out_1_ap_vld <= ap_const_logic_1;
        else 
            const_size_out_1_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    fc1_input_V_ap_vld_in_sig_assign_proc : process(fc1_input_V_ap_vld, fc1_input_V_ap_vld_preg)
    begin
        if ((fc1_input_V_ap_vld = ap_const_logic_1)) then 
            fc1_input_V_ap_vld_in_sig <= fc1_input_V_ap_vld;
        else 
            fc1_input_V_ap_vld_in_sig <= fc1_input_V_ap_vld_preg;
        end if; 
    end process;


    fc1_input_V_blk_n_assign_proc : process(ap_start, ap_CS_fsm_state1, fc1_input_V_ap_vld)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            fc1_input_V_blk_n <= fc1_input_V_ap_vld;
        else 
            fc1_input_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    fc1_input_V_in_sig_assign_proc : process(fc1_input_V, fc1_input_V_preg, fc1_input_V_ap_vld)
    begin
        if ((fc1_input_V_ap_vld = ap_const_logic_1)) then 
            fc1_input_V_in_sig <= fc1_input_V;
        else 
            fc1_input_V_in_sig <= fc1_input_V_preg;
        end if; 
    end process;

        layer3_out_0_V <= std_logic_vector(IEEE.numeric_std.resize(signed(call_ret6_linear_ap_fixed_ap_fixed_16_6_0_0_0_linear_config3_s_fu_75_ap_return),16));


    layer3_out_0_V_ap_vld_assign_proc : process(ap_start, ap_CS_fsm_state1, fc1_input_V_ap_vld_in_sig)
    begin
        if ((not(((ap_start = ap_const_logic_0) or (fc1_input_V_ap_vld_in_sig = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            layer3_out_0_V_ap_vld <= ap_const_logic_1;
        else 
            layer3_out_0_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

end behav;
