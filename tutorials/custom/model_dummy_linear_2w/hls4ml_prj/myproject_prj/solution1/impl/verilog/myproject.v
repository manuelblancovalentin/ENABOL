// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="myproject,hls_ip_2019_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xcu250-figd2104-2L-e,HLS_INPUT_CLOCK=5.000000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=3.880000,HLS_SYN_LAT=9,HLS_SYN_TPT=10,HLS_SYN_MEM=2,HLS_SYN_DSP=7,HLS_SYN_FF=400,HLS_SYN_LUT=1211,HLS_VERSION=2019_2}" *)

module myproject (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        fc1_input_V,
        fc1_input_V_ap_vld,
        layer5_out_0_V,
        layer5_out_0_V_ap_vld,
        loss_layer5_out_V,
        loss_layer5_out_V_ap_vld,
        const_size_in_1,
        const_size_in_1_ap_vld,
        const_size_out_1,
        const_size_out_1_ap_vld,
        layer5_out_ground_truth_V_address0,
        layer5_out_ground_truth_V_ce0,
        layer5_out_ground_truth_V_q0,
        train
);

parameter    ap_ST_fsm_state1 = 10'd1;
parameter    ap_ST_fsm_state2 = 10'd2;
parameter    ap_ST_fsm_state3 = 10'd4;
parameter    ap_ST_fsm_state4 = 10'd8;
parameter    ap_ST_fsm_state5 = 10'd16;
parameter    ap_ST_fsm_state6 = 10'd32;
parameter    ap_ST_fsm_state7 = 10'd64;
parameter    ap_ST_fsm_state8 = 10'd128;
parameter    ap_ST_fsm_state9 = 10'd256;
parameter    ap_ST_fsm_state10 = 10'd512;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [15:0] fc1_input_V;
input   fc1_input_V_ap_vld;
output  [15:0] layer5_out_0_V;
output   layer5_out_0_V_ap_vld;
output  [15:0] loss_layer5_out_V;
output   loss_layer5_out_V_ap_vld;
output  [15:0] const_size_in_1;
output   const_size_in_1_ap_vld;
output  [15:0] const_size_out_1;
output   const_size_out_1_ap_vld;
output  [0:0] layer5_out_ground_truth_V_address0;
output   layer5_out_ground_truth_V_ce0;
input  [15:0] layer5_out_ground_truth_V_q0;
input   train;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg layer5_out_0_V_ap_vld;
reg loss_layer5_out_V_ap_vld;
reg const_size_in_1_ap_vld;
reg const_size_out_1_ap_vld;
reg layer5_out_ground_truth_V_ce0;

(* fsm_encoding = "none" *) reg   [9:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [15:0] fc1_input_V_preg;
reg   [15:0] fc1_input_V_in_sig;
reg    fc1_input_V_ap_vld_preg;
reg    fc1_input_V_ap_vld_in_sig;
reg   [0:0] w2_V_address0;
reg    w2_V_ce0;
reg    w2_V_we0;
wire   [5:0] w2_V_d0;
wire   [5:0] w2_V_q0;
reg   [0:0] w2_V_address1;
reg    w2_V_ce1;
reg    w2_V_we1;
wire   [5:0] w2_V_d1;
wire   [5:0] w2_V_q1;
reg   [0:0] w4_V_address0;
reg    w4_V_ce0;
reg    w4_V_we0;
wire   [5:0] w4_V_d0;
wire   [5:0] w4_V_q0;
reg   [0:0] w4_V_address1;
reg    w4_V_ce1;
reg    w4_V_we1;
wire   [5:0] w4_V_d1;
wire   [5:0] w4_V_q1;
reg    fc1_input_V_blk_n;
reg   [0:0] train_read_reg_1666;
reg    ap_block_state1;
reg  signed [15:0] fc1_input_V_read_reg_1670;
reg   [15:0] cache2_V_reg_1681;
wire    ap_CS_fsm_state2;
reg  signed [15:0] layer3_out_0_V_reg_1686;
wire    ap_CS_fsm_state3;
reg  signed [15:0] layer3_out_1_V_reg_1692;
wire  signed [15:0] p_Val2_4_fu_369_p3;
reg  signed [15:0] p_Val2_4_reg_1698;
wire    ap_CS_fsm_state5;
reg   [5:0] w2_V_load_reg_1704;
reg   [5:0] w2_V_load_1_reg_1709;
wire   [15:0] layer5_out_grads_0_V_fu_452_p3;
wire    ap_CS_fsm_state6;
wire   [15:0] select_ln340_7_fu_752_p3;
reg   [5:0] w4_V_load_reg_1724;
reg   [5:0] w4_V_load_1_reg_1729;
reg   [0:0] p_Result_4_reg_1734;
wire    ap_CS_fsm_state7;
wire   [15:0] p_Val2_9_fu_797_p2;
reg   [15:0] p_Val2_9_reg_1740;
wire   [0:0] carry_1_fu_817_p2;
reg   [0:0] carry_1_reg_1746;
wire   [0:0] p_Result_6_fu_823_p3;
reg   [0:0] p_Result_6_reg_1752;
wire   [0:0] Range1_all_ones_fu_855_p2;
reg   [0:0] Range1_all_ones_reg_1757;
wire   [0:0] Range1_all_zeros_fu_861_p2;
reg   [0:0] Range1_all_zeros_reg_1763;
wire   [0:0] and_ln786_fu_894_p2;
reg   [0:0] and_ln786_reg_1768;
reg   [0:0] tmp_18_reg_1774;
wire    ap_CS_fsm_state8;
wire   [15:0] add_ln415_fu_941_p2;
reg   [15:0] add_ln415_reg_1780;
wire   [0:0] and_ln416_fu_961_p2;
reg   [0:0] and_ln416_reg_1786;
wire   [0:0] tmp_22_fu_967_p3;
reg   [0:0] tmp_22_reg_1792;
wire   [0:0] icmp_ln879_1_fu_999_p2;
reg   [0:0] icmp_ln879_1_reg_1797;
wire   [0:0] icmp_ln768_fu_1005_p2;
reg   [0:0] icmp_ln768_reg_1803;
wire   [0:0] and_ln786_5_fu_1038_p2;
reg   [0:0] and_ln786_5_reg_1808;
reg   [0:0] tmp_24_reg_1814;
wire   [15:0] add_ln415_1_fu_1081_p2;
reg   [15:0] add_ln415_1_reg_1820;
wire   [0:0] and_ln416_1_fu_1101_p2;
reg   [0:0] and_ln416_1_reg_1826;
wire   [0:0] tmp_28_fu_1107_p3;
reg   [0:0] tmp_28_reg_1832;
wire   [0:0] icmp_ln879_3_fu_1139_p2;
reg   [0:0] icmp_ln879_3_reg_1837;
wire   [0:0] icmp_ln768_1_fu_1145_p2;
reg   [0:0] icmp_ln768_1_reg_1843;
wire   [0:0] and_ln786_7_fu_1178_p2;
reg   [0:0] and_ln786_7_reg_1848;
reg   [15:0] tmp_reg_1854;
wire    ap_CS_fsm_state9;
reg   [15:0] tmp_2_reg_1860;
wire    grp_dense_latency_ap_fixed_ap_fixed_config4_0_0_fu_241_ap_start;
wire    grp_dense_latency_ap_fixed_ap_fixed_config4_0_0_fu_241_ap_done;
wire    grp_dense_latency_ap_fixed_ap_fixed_config4_0_0_fu_241_ap_idle;
wire    grp_dense_latency_ap_fixed_ap_fixed_config4_0_0_fu_241_ap_ready;
wire   [0:0] grp_dense_latency_ap_fixed_ap_fixed_config4_0_0_fu_241_w4_V_address0;
wire    grp_dense_latency_ap_fixed_ap_fixed_config4_0_0_fu_241_w4_V_ce0;
wire   [0:0] grp_dense_latency_ap_fixed_ap_fixed_config4_0_0_fu_241_w4_V_address1;
wire    grp_dense_latency_ap_fixed_ap_fixed_config4_0_0_fu_241_w4_V_ce1;
wire   [15:0] grp_dense_latency_ap_fixed_ap_fixed_config4_0_0_fu_241_ap_return;
reg    grp_dense_latency_ap_fixed_ap_fixed_config2_0_0_0_fu_249_ap_start;
wire    grp_dense_latency_ap_fixed_ap_fixed_config2_0_0_0_fu_249_ap_done;
wire    grp_dense_latency_ap_fixed_ap_fixed_config2_0_0_0_fu_249_ap_idle;
wire    grp_dense_latency_ap_fixed_ap_fixed_config2_0_0_0_fu_249_ap_ready;
reg    grp_dense_latency_ap_fixed_ap_fixed_config2_0_0_0_fu_249_ap_ce;
wire   [0:0] grp_dense_latency_ap_fixed_ap_fixed_config2_0_0_0_fu_249_w2_V_address0;
wire    grp_dense_latency_ap_fixed_ap_fixed_config2_0_0_0_fu_249_w2_V_ce0;
wire   [0:0] grp_dense_latency_ap_fixed_ap_fixed_config2_0_0_0_fu_249_w2_V_address1;
wire    grp_dense_latency_ap_fixed_ap_fixed_config2_0_0_0_fu_249_w2_V_ce1;
wire   [15:0] grp_dense_latency_ap_fixed_ap_fixed_config2_0_0_0_fu_249_ap_return_0;
wire   [15:0] grp_dense_latency_ap_fixed_ap_fixed_config2_0_0_0_fu_249_ap_return_1;
reg    ap_block_state1_ignore_call15;
wire    call_ret2_linear_ap_fixed_ap_fixed_16_6_0_0_0_linear_config3_s_fu_257_ap_ready;
wire   [15:0] call_ret2_linear_ap_fixed_ap_fixed_16_6_0_0_0_linear_config3_s_fu_257_ap_return_0;
wire   [15:0] call_ret2_linear_ap_fixed_ap_fixed_16_6_0_0_0_linear_config3_s_fu_257_ap_return_1;
wire    p_Val2_1_linear_ap_fixed_ap_fixed_16_6_0_0_0_linear_config5_s_fu_263_ap_ready;
wire   [15:0] p_Val2_1_linear_ap_fixed_ap_fixed_16_6_0_0_0_linear_config5_s_fu_263_ap_return;
reg   [15:0] layer4_out_grads_0_V_reg_218;
reg   [15:0] storemerge_reg_229;
reg    grp_dense_latency_ap_fixed_ap_fixed_config4_0_0_fu_241_ap_start_reg;
reg   [9:0] ap_NS_fsm;
wire    ap_NS_fsm_state3;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state10;
wire  signed [15:0] rhs_V_fu_293_p0;
wire  signed [16:0] lhs_V_fu_290_p1;
wire  signed [16:0] rhs_V_fu_293_p1;
wire   [16:0] ret_V_fu_297_p2;
wire   [0:0] p_Result_1_fu_315_p3;
wire   [0:0] p_Result_s_fu_303_p3;
wire   [0:0] xor_ln786_fu_323_p2;
wire   [0:0] xor_ln340_1_fu_341_p2;
wire   [0:0] xor_ln340_fu_335_p2;
wire   [15:0] p_Val2_3_fu_311_p1;
wire   [0:0] underflow_fu_329_p2;
wire   [0:0] or_ln340_fu_347_p2;
wire   [15:0] select_ln340_fu_353_p3;
wire   [15:0] select_ln388_fu_361_p3;
wire  signed [16:0] r_V_fu_377_p1;
wire   [16:0] r_V_4_fu_380_p2;
wire   [0:0] p_Result_3_fu_398_p3;
wire   [0:0] p_Result_2_fu_386_p3;
wire   [0:0] xor_ln786_1_fu_406_p2;
wire   [0:0] xor_ln340_3_fu_424_p2;
wire   [0:0] xor_ln340_2_fu_418_p2;
wire   [15:0] p_Val2_6_fu_394_p1;
wire   [0:0] underflow_1_fu_412_p2;
wire   [0:0] or_ln340_1_fu_430_p2;
wire   [15:0] select_ln340_2_fu_436_p3;
wire   [15:0] select_ln388_1_fu_444_p3;
wire   [0:0] deleted_zeros_fu_460_p3;
wire   [0:0] xor_ln785_fu_469_p2;
wire   [0:0] or_ln785_fu_475_p2;
wire   [0:0] xor_ln785_1_fu_480_p2;
wire   [0:0] and_ln781_fu_465_p2;
wire   [0:0] or_ln786_fu_491_p2;
wire   [0:0] xor_ln786_2_fu_496_p2;
wire   [0:0] underflow_2_fu_502_p2;
wire   [0:0] overflow_fu_485_p2;
wire   [0:0] or_ln340_3_fu_513_p2;
wire   [0:0] or_ln340_2_fu_507_p2;
wire   [0:0] or_ln340_4_fu_518_p2;
wire   [15:0] select_ln340_4_fu_524_p3;
wire   [15:0] select_ln388_2_fu_531_p3;
wire   [15:0] select_ln340_5_fu_538_p3;
wire   [14:0] trunc_ln708_3_fu_558_p4;
wire   [0:0] trunc_ln1118_fu_546_p1;
wire   [15:0] zext_ln415_1_fu_580_p1;
wire  signed [15:0] p_Val2_10_fu_568_p1;
wire   [15:0] p_Val2_11_fu_584_p2;
wire   [0:0] tmp_14_fu_590_p3;
wire   [0:0] p_Result_8_fu_572_p3;
wire   [0:0] xor_ln416_2_fu_598_p2;
wire   [0:0] tmp_17_fu_626_p3;
wire   [0:0] xor_ln416_3_fu_640_p2;
wire   [0:0] or_ln416_1_fu_646_p2;
wire   [0:0] xor_ln779_1_fu_634_p2;
wire   [0:0] carry_3_fu_604_p2;
wire   [0:0] Range2_all_ones_2_fu_618_p3;
wire   [0:0] p_Result_9_fu_610_p3;
wire   [0:0] xor_ln785_2_fu_664_p2;
wire   [0:0] p_Result_7_fu_550_p3;
wire   [0:0] or_ln785_1_fu_670_p2;
wire   [0:0] xor_ln785_3_fu_676_p2;
wire   [0:0] or_ln416_fu_652_p2;
wire   [0:0] and_ln786_2_fu_688_p2;
wire   [0:0] and_ln781_1_fu_658_p2;
wire   [0:0] and_ln786_3_fu_694_p2;
wire   [0:0] or_ln786_1_fu_700_p2;
wire   [0:0] xor_ln786_3_fu_706_p2;
wire   [0:0] underflow_3_fu_712_p2;
wire   [0:0] overflow_1_fu_682_p2;
wire   [0:0] or_ln340_6_fu_724_p2;
wire   [0:0] or_ln340_5_fu_718_p2;
wire   [0:0] or_ln340_7_fu_730_p2;
wire   [15:0] select_ln340_6_fu_736_p3;
wire   [15:0] select_ln388_3_fu_744_p3;
wire  signed [31:0] r_V_5_fu_1613_p2;
wire   [0:0] tmp_8_fu_786_p3;
wire   [15:0] zext_ln415_fu_793_p1;
wire   [15:0] p_Val2_8_fu_770_p4;
wire   [0:0] tmp_9_fu_803_p3;
wire   [0:0] p_Result_5_fu_779_p3;
wire   [0:0] xor_ln416_1_fu_811_p2;
wire   [4:0] tmp_i_fu_831_p4;
wire   [5:0] tmp_2_i_fu_846_p4;
wire   [0:0] tmp_11_fu_867_p3;
wire   [0:0] Range2_all_ones_fu_840_p2;
wire   [0:0] xor_ln779_fu_874_p2;
wire   [0:0] and_ln779_fu_880_p2;
wire   [0:0] deleted_ones_fu_886_p3;
wire  signed [31:0] mul_ln1118_2_fu_1626_p2;
wire   [0:0] tmp_20_fu_930_p3;
wire   [15:0] trunc_ln708_7_fu_914_p4;
wire   [15:0] zext_ln415_2_fu_937_p1;
wire   [0:0] tmp_21_fu_947_p3;
wire   [0:0] tmp_19_fu_923_p3;
wire   [0:0] xor_ln416_fu_955_p2;
wire   [4:0] p_Result_3_i8_fu_975_p4;
wire   [5:0] p_Result_4_i9_fu_990_p4;
wire   [0:0] tmp_23_fu_1011_p3;
wire   [0:0] icmp_ln879_fu_984_p2;
wire   [0:0] xor_ln779_2_fu_1018_p2;
wire   [0:0] and_ln779_1_fu_1024_p2;
wire   [0:0] select_ln416_fu_1030_p3;
wire  signed [31:0] mul_ln1118_3_fu_1639_p2;
wire   [0:0] tmp_26_fu_1070_p3;
wire   [15:0] trunc_ln708_9_fu_1054_p4;
wire   [15:0] zext_ln415_3_fu_1077_p1;
wire   [0:0] tmp_27_fu_1087_p3;
wire   [0:0] tmp_25_fu_1063_p3;
wire   [0:0] xor_ln416_4_fu_1095_p2;
wire   [4:0] p_Result_3_1_i_fu_1115_p4;
wire   [5:0] p_Result_4_1_i_fu_1130_p4;
wire   [0:0] tmp_29_fu_1151_p3;
wire   [0:0] icmp_ln879_2_fu_1124_p2;
wire   [0:0] xor_ln779_3_fu_1158_p2;
wire   [0:0] and_ln779_2_fu_1164_p2;
wire   [0:0] select_ln416_1_fu_1170_p3;
wire   [0:0] select_ln777_fu_1184_p3;
wire   [0:0] xor_ln785_4_fu_1193_p2;
wire   [0:0] or_ln785_2_fu_1199_p2;
wire   [0:0] xor_ln785_5_fu_1204_p2;
wire   [0:0] and_ln781_2_fu_1189_p2;
wire   [0:0] or_ln786_2_fu_1215_p2;
wire   [0:0] xor_ln786_4_fu_1220_p2;
wire   [0:0] and_ln786_6_fu_1226_p2;
wire   [0:0] and_ln785_fu_1209_p2;
wire   [0:0] or_ln340_9_fu_1237_p2;
wire   [0:0] or_ln340_8_fu_1231_p2;
wire   [0:0] or_ln340_10_fu_1242_p2;
wire   [15:0] select_ln340_8_fu_1248_p3;
wire   [15:0] select_ln388_4_fu_1255_p3;
wire  signed [15:0] layer2_out_grads_0_V_fu_1262_p3;
wire   [18:0] shl_ln1118_1_fu_1270_p3;
wire   [16:0] shl_ln1118_2_fu_1282_p3;
wire  signed [19:0] sext_ln1118_1_fu_1278_p1;
wire  signed [19:0] sext_ln1118_2_fu_1290_p1;
wire   [19:0] add_ln1118_1_fu_1294_p2;
wire   [20:0] shl_ln728_1_fu_1300_p3;
wire  signed [20:0] sext_ln1193_fu_1307_p1;
wire   [20:0] sub_ln1193_3_fu_1311_p2;
wire   [0:0] select_ln777_1_fu_1328_p3;
wire   [0:0] xor_ln785_6_fu_1337_p2;
wire   [0:0] or_ln785_3_fu_1343_p2;
wire   [0:0] xor_ln785_7_fu_1348_p2;
wire   [0:0] and_ln781_3_fu_1333_p2;
wire   [0:0] or_ln786_3_fu_1359_p2;
wire   [0:0] xor_ln786_5_fu_1364_p2;
wire   [0:0] and_ln786_8_fu_1370_p2;
wire   [0:0] and_ln785_1_fu_1353_p2;
wire   [0:0] or_ln340_12_fu_1381_p2;
wire   [0:0] or_ln340_11_fu_1375_p2;
wire   [0:0] or_ln340_13_fu_1386_p2;
wire   [15:0] select_ln340_10_fu_1392_p3;
wire   [15:0] select_ln388_5_fu_1399_p3;
wire  signed [15:0] layer2_out_grads_1_V_fu_1406_p3;
wire   [18:0] shl_ln1118_3_fu_1414_p3;
wire   [16:0] shl_ln1118_7_fu_1426_p3;
wire  signed [19:0] sext_ln1118_4_fu_1422_p1;
wire  signed [19:0] sext_ln1118_5_fu_1434_p1;
wire   [19:0] add_ln1118_3_fu_1438_p2;
wire   [20:0] shl_ln728_3_fu_1444_p3;
wire  signed [20:0] sext_ln1193_1_fu_1451_p1;
wire   [20:0] sub_ln1193_4_fu_1455_p2;
wire  signed [25:0] mul_ln1118_fu_1652_p2;
wire  signed [25:0] mul_ln1118_4_fu_1659_p2;
wire   [18:0] shl_ln_fu_1501_p3;
wire   [16:0] shl_ln1118_4_fu_1512_p3;
wire  signed [19:0] sext_ln1118_9_fu_1519_p1;
wire  signed [19:0] sext_ln1118_8_fu_1508_p1;
wire   [19:0] add_ln1118_fu_1523_p2;
wire   [20:0] shl_ln1_fu_1529_p3;
wire  signed [20:0] sext_ln1193_2_fu_1536_p1;
wire   [20:0] sub_ln1193_fu_1540_p2;
wire   [18:0] shl_ln1118_5_fu_1557_p3;
wire   [16:0] shl_ln1118_6_fu_1568_p3;
wire  signed [19:0] sext_ln1118_12_fu_1575_p1;
wire  signed [19:0] sext_ln1118_11_fu_1564_p1;
wire   [19:0] add_ln1118_2_fu_1579_p2;
wire   [20:0] shl_ln728_2_fu_1585_p3;
wire  signed [20:0] sext_ln1193_3_fu_1592_p1;
wire   [20:0] sub_ln1193_2_fu_1596_p2;
wire  signed [15:0] r_V_5_fu_1613_p0;
wire  signed [31:0] r_V_2_fu_760_p1;
wire  signed [15:0] r_V_5_fu_1613_p1;
wire  signed [15:0] mul_ln1118_2_fu_1626_p0;
wire  signed [31:0] sext_ln1116_fu_900_p1;
wire  signed [15:0] mul_ln1118_3_fu_1639_p0;
wire  signed [15:0] mul_ln1118_fu_1652_p0;
wire  signed [25:0] sext_ln1118_7_fu_1476_p1;
wire  signed [15:0] mul_ln1118_4_fu_1659_p0;

// power-on initialization
initial begin
#0 ap_CS_fsm = 10'd1;
#0 fc1_input_V_preg = 16'd0;
#0 fc1_input_V_ap_vld_preg = 1'b0;
#0 grp_dense_latency_ap_fixed_ap_fixed_config4_0_0_fu_241_ap_start_reg = 1'b0;
end

myproject_w2_V #(
    .DataWidth( 6 ),
    .AddressRange( 2 ),
    .AddressWidth( 1 ))
w2_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(w2_V_address0),
    .ce0(w2_V_ce0),
    .we0(w2_V_we0),
    .d0(w2_V_d0),
    .q0(w2_V_q0),
    .address1(w2_V_address1),
    .ce1(w2_V_ce1),
    .we1(w2_V_we1),
    .d1(w2_V_d1),
    .q1(w2_V_q1)
);

myproject_w4_V #(
    .DataWidth( 6 ),
    .AddressRange( 2 ),
    .AddressWidth( 1 ))
w4_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(w4_V_address0),
    .ce0(w4_V_ce0),
    .we0(w4_V_we0),
    .d0(w4_V_d0),
    .q0(w4_V_q0),
    .address1(w4_V_address1),
    .ce1(w4_V_ce1),
    .we1(w4_V_we1),
    .d1(w4_V_d1),
    .q1(w4_V_q1)
);

dense_latency_ap_fixed_ap_fixed_config4_0_0 grp_dense_latency_ap_fixed_ap_fixed_config4_0_0_fu_241(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_dense_latency_ap_fixed_ap_fixed_config4_0_0_fu_241_ap_start),
    .ap_done(grp_dense_latency_ap_fixed_ap_fixed_config4_0_0_fu_241_ap_done),
    .ap_idle(grp_dense_latency_ap_fixed_ap_fixed_config4_0_0_fu_241_ap_idle),
    .ap_ready(grp_dense_latency_ap_fixed_ap_fixed_config4_0_0_fu_241_ap_ready),
    .ap_ce(1'b1),
    .data_0_V_read(call_ret2_linear_ap_fixed_ap_fixed_16_6_0_0_0_linear_config3_s_fu_257_ap_return_0),
    .data_1_V_read(call_ret2_linear_ap_fixed_ap_fixed_16_6_0_0_0_linear_config3_s_fu_257_ap_return_1),
    .w4_V_address0(grp_dense_latency_ap_fixed_ap_fixed_config4_0_0_fu_241_w4_V_address0),
    .w4_V_ce0(grp_dense_latency_ap_fixed_ap_fixed_config4_0_0_fu_241_w4_V_ce0),
    .w4_V_q0(w4_V_q0),
    .w4_V_address1(grp_dense_latency_ap_fixed_ap_fixed_config4_0_0_fu_241_w4_V_address1),
    .w4_V_ce1(grp_dense_latency_ap_fixed_ap_fixed_config4_0_0_fu_241_w4_V_ce1),
    .w4_V_q1(w4_V_q1),
    .ap_return(grp_dense_latency_ap_fixed_ap_fixed_config4_0_0_fu_241_ap_return)
);

dense_latency_ap_fixed_ap_fixed_config2_0_0_0 grp_dense_latency_ap_fixed_ap_fixed_config2_0_0_0_fu_249(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_dense_latency_ap_fixed_ap_fixed_config2_0_0_0_fu_249_ap_start),
    .ap_done(grp_dense_latency_ap_fixed_ap_fixed_config2_0_0_0_fu_249_ap_done),
    .ap_idle(grp_dense_latency_ap_fixed_ap_fixed_config2_0_0_0_fu_249_ap_idle),
    .ap_ready(grp_dense_latency_ap_fixed_ap_fixed_config2_0_0_0_fu_249_ap_ready),
    .ap_ce(grp_dense_latency_ap_fixed_ap_fixed_config2_0_0_0_fu_249_ap_ce),
    .data_V_read(fc1_input_V_in_sig),
    .w2_V_address0(grp_dense_latency_ap_fixed_ap_fixed_config2_0_0_0_fu_249_w2_V_address0),
    .w2_V_ce0(grp_dense_latency_ap_fixed_ap_fixed_config2_0_0_0_fu_249_w2_V_ce0),
    .w2_V_q0(w2_V_q0),
    .w2_V_address1(grp_dense_latency_ap_fixed_ap_fixed_config2_0_0_0_fu_249_w2_V_address1),
    .w2_V_ce1(grp_dense_latency_ap_fixed_ap_fixed_config2_0_0_0_fu_249_w2_V_ce1),
    .w2_V_q1(w2_V_q1),
    .ap_return_0(grp_dense_latency_ap_fixed_ap_fixed_config2_0_0_0_fu_249_ap_return_0),
    .ap_return_1(grp_dense_latency_ap_fixed_ap_fixed_config2_0_0_0_fu_249_ap_return_1)
);

linear_ap_fixed_ap_fixed_16_6_0_0_0_linear_config3_s call_ret2_linear_ap_fixed_ap_fixed_16_6_0_0_0_linear_config3_s_fu_257(
    .ap_ready(call_ret2_linear_ap_fixed_ap_fixed_16_6_0_0_0_linear_config3_s_fu_257_ap_ready),
    .data_0_V_read(grp_dense_latency_ap_fixed_ap_fixed_config2_0_0_0_fu_249_ap_return_0),
    .data_1_V_read(grp_dense_latency_ap_fixed_ap_fixed_config2_0_0_0_fu_249_ap_return_1),
    .ap_return_0(call_ret2_linear_ap_fixed_ap_fixed_16_6_0_0_0_linear_config3_s_fu_257_ap_return_0),
    .ap_return_1(call_ret2_linear_ap_fixed_ap_fixed_16_6_0_0_0_linear_config3_s_fu_257_ap_return_1)
);

linear_ap_fixed_ap_fixed_16_6_0_0_0_linear_config5_s p_Val2_1_linear_ap_fixed_ap_fixed_16_6_0_0_0_linear_config5_s_fu_263(
    .ap_ready(p_Val2_1_linear_ap_fixed_ap_fixed_16_6_0_0_0_linear_config5_s_fu_263_ap_ready),
    .data_V_read(grp_dense_latency_ap_fixed_ap_fixed_config4_0_0_fu_241_ap_return),
    .ap_return(p_Val2_1_linear_ap_fixed_ap_fixed_16_6_0_0_0_linear_config5_s_fu_263_ap_return)
);

myproject_mul_mul_16s_16s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 32 ))
myproject_mul_mul_16s_16s_32_1_1_U9(
    .din0(r_V_5_fu_1613_p0),
    .din1(r_V_5_fu_1613_p1),
    .dout(r_V_5_fu_1613_p2)
);

myproject_mul_mul_16s_16s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 32 ))
myproject_mul_mul_16s_16s_32_1_1_U10(
    .din0(mul_ln1118_2_fu_1626_p0),
    .din1(layer3_out_0_V_reg_1686),
    .dout(mul_ln1118_2_fu_1626_p2)
);

myproject_mul_mul_16s_16s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 32 ))
myproject_mul_mul_16s_16s_32_1_1_U11(
    .din0(mul_ln1118_3_fu_1639_p0),
    .din1(layer3_out_1_V_reg_1692),
    .dout(mul_ln1118_3_fu_1639_p2)
);

myproject_mul_mul_16s_16s_26_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 26 ))
myproject_mul_mul_16s_16s_26_1_1_U12(
    .din0(mul_ln1118_fu_1652_p0),
    .din1(layer2_out_grads_0_V_fu_1262_p3),
    .dout(mul_ln1118_fu_1652_p2)
);

myproject_mul_mul_16s_16s_26_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 26 ))
myproject_mul_mul_16s_16s_26_1_1_U13(
    .din0(mul_ln1118_4_fu_1659_p0),
    .din1(layer2_out_grads_1_V_fu_1406_p3),
    .dout(mul_ln1118_4_fu_1659_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        fc1_input_V_ap_vld_preg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state10)) begin
            fc1_input_V_ap_vld_preg <= 1'b0;
        end else if ((~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (fc1_input_V_ap_vld == 1'b1))) begin
            fc1_input_V_ap_vld_preg <= fc1_input_V_ap_vld;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        fc1_input_V_preg <= 16'd0;
    end else begin
        if ((~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (fc1_input_V_ap_vld == 1'b1))) begin
            fc1_input_V_preg <= fc1_input_V;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_dense_latency_ap_fixed_ap_fixed_config4_0_0_fu_241_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_NS_fsm_state3) & (1'b1 == ap_CS_fsm_state2))) begin
            grp_dense_latency_ap_fixed_ap_fixed_config4_0_0_fu_241_ap_start_reg <= 1'b1;
        end else if ((grp_dense_latency_ap_fixed_ap_fixed_config4_0_0_fu_241_ap_ready == 1'b1)) begin
            grp_dense_latency_ap_fixed_ap_fixed_config4_0_0_fu_241_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        if ((train_read_reg_1666 == 1'd0)) begin
            layer4_out_grads_0_V_reg_218 <= 16'd0;
        end else if ((train_read_reg_1666 == 1'd1)) begin
            layer4_out_grads_0_V_reg_218 <= layer5_out_grads_0_V_fu_452_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        if ((train_read_reg_1666 == 1'd0)) begin
            storemerge_reg_229 <= 16'd0;
        end else if ((train_read_reg_1666 == 1'd1)) begin
            storemerge_reg_229 <= select_ln340_7_fu_752_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((train_read_reg_1666 == 1'd1) & (1'b1 == ap_CS_fsm_state7))) begin
        Range1_all_ones_reg_1757 <= Range1_all_ones_fu_855_p2;
        Range1_all_zeros_reg_1763 <= Range1_all_zeros_fu_861_p2;
        and_ln786_reg_1768 <= and_ln786_fu_894_p2;
        carry_1_reg_1746 <= carry_1_fu_817_p2;
        p_Result_4_reg_1734 <= r_V_5_fu_1613_p2[32'd31];
        p_Result_6_reg_1752 <= p_Val2_9_fu_797_p2[32'd15];
        p_Val2_9_reg_1740 <= p_Val2_9_fu_797_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        add_ln415_1_reg_1820 <= add_ln415_1_fu_1081_p2;
        add_ln415_reg_1780 <= add_ln415_fu_941_p2;
        and_ln416_1_reg_1826 <= and_ln416_1_fu_1101_p2;
        and_ln416_reg_1786 <= and_ln416_fu_961_p2;
        and_ln786_5_reg_1808 <= and_ln786_5_fu_1038_p2;
        and_ln786_7_reg_1848 <= and_ln786_7_fu_1178_p2;
        icmp_ln768_1_reg_1843 <= icmp_ln768_1_fu_1145_p2;
        icmp_ln768_reg_1803 <= icmp_ln768_fu_1005_p2;
        icmp_ln879_1_reg_1797 <= icmp_ln879_1_fu_999_p2;
        icmp_ln879_3_reg_1837 <= icmp_ln879_3_fu_1139_p2;
        tmp_18_reg_1774 <= mul_ln1118_2_fu_1626_p2[32'd31];
        tmp_22_reg_1792 <= add_ln415_fu_941_p2[32'd15];
        tmp_24_reg_1814 <= mul_ln1118_3_fu_1639_p2[32'd31];
        tmp_28_reg_1832 <= add_ln415_1_fu_1081_p2[32'd15];
    end
end

always @ (posedge ap_clk) begin
    if (((train_read_reg_1666 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        cache2_V_reg_1681 <= layer5_out_ground_truth_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((~((fc1_input_V_ap_vld_in_sig == 1'b0) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        fc1_input_V_read_reg_1670 <= fc1_input_V_in_sig;
        train_read_reg_1666 <= train;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        layer3_out_0_V_reg_1686 <= call_ret2_linear_ap_fixed_ap_fixed_16_6_0_0_0_linear_config3_s_fu_257_ap_return_0;
        layer3_out_1_V_reg_1692 <= call_ret2_linear_ap_fixed_ap_fixed_16_6_0_0_0_linear_config3_s_fu_257_ap_return_1;
    end
end

always @ (posedge ap_clk) begin
    if (((train_read_reg_1666 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        p_Val2_4_reg_1698 <= p_Val2_4_fu_369_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        tmp_2_reg_1860 <= {{mul_ln1118_4_fu_1659_p2[25:10]}};
        tmp_reg_1854 <= {{mul_ln1118_fu_1652_p2[25:10]}};
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        w2_V_load_1_reg_1709 <= w2_V_q1;
        w2_V_load_reg_1704 <= w2_V_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        w4_V_load_1_reg_1729 <= w4_V_q1;
        w4_V_load_reg_1724 <= w4_V_q0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        const_size_in_1_ap_vld = 1'b1;
    end else begin
        const_size_in_1_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        const_size_out_1_ap_vld = 1'b1;
    end else begin
        const_size_out_1_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((fc1_input_V_ap_vld == 1'b1)) begin
        fc1_input_V_ap_vld_in_sig = fc1_input_V_ap_vld;
    end else begin
        fc1_input_V_ap_vld_in_sig = fc1_input_V_ap_vld_preg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        fc1_input_V_blk_n = fc1_input_V_ap_vld;
    end else begin
        fc1_input_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((fc1_input_V_ap_vld == 1'b1)) begin
        fc1_input_V_in_sig = fc1_input_V;
    end else begin
        fc1_input_V_in_sig = fc1_input_V_preg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | (~((fc1_input_V_ap_vld_in_sig == 1'b0) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1)))) begin
        grp_dense_latency_ap_fixed_ap_fixed_config2_0_0_0_fu_249_ap_ce = 1'b1;
    end else begin
        grp_dense_latency_ap_fixed_ap_fixed_config2_0_0_0_fu_249_ap_ce = 1'b0;
    end
end

always @ (*) begin
    if ((~((fc1_input_V_ap_vld_in_sig == 1'b0) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        grp_dense_latency_ap_fixed_ap_fixed_config2_0_0_0_fu_249_ap_start = 1'b1;
    end else begin
        grp_dense_latency_ap_fixed_ap_fixed_config2_0_0_0_fu_249_ap_start = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        layer5_out_0_V_ap_vld = 1'b1;
    end else begin
        layer5_out_0_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((~((fc1_input_V_ap_vld_in_sig == 1'b0) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        layer5_out_ground_truth_V_ce0 = 1'b1;
    end else begin
        layer5_out_ground_truth_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        loss_layer5_out_V_ap_vld = 1'b1;
    end else begin
        loss_layer5_out_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state4))) begin
        w2_V_address0 = 1'd0;
    end else if (((1'b1 == ap_CS_fsm_state1) | (1'b1 == ap_CS_fsm_state2))) begin
        w2_V_address0 = grp_dense_latency_ap_fixed_ap_fixed_config2_0_0_0_fu_249_w2_V_address0;
    end else begin
        w2_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state4))) begin
        w2_V_address1 = 1'd1;
    end else if (((1'b1 == ap_CS_fsm_state1) | (1'b1 == ap_CS_fsm_state2))) begin
        w2_V_address1 = grp_dense_latency_ap_fixed_ap_fixed_config2_0_0_0_fu_249_w2_V_address1;
    end else begin
        w2_V_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state4))) begin
        w2_V_ce0 = 1'b1;
    end else if (((1'b1 == ap_CS_fsm_state1) | (1'b1 == ap_CS_fsm_state2))) begin
        w2_V_ce0 = grp_dense_latency_ap_fixed_ap_fixed_config2_0_0_0_fu_249_w2_V_ce0;
    end else begin
        w2_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state4))) begin
        w2_V_ce1 = 1'b1;
    end else if (((1'b1 == ap_CS_fsm_state1) | (1'b1 == ap_CS_fsm_state2))) begin
        w2_V_ce1 = grp_dense_latency_ap_fixed_ap_fixed_config2_0_0_0_fu_249_w2_V_ce1;
    end else begin
        w2_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        w2_V_we0 = 1'b1;
    end else begin
        w2_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        w2_V_we1 = 1'b1;
    end else begin
        w2_V_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state7))) begin
        w4_V_address0 = 1'd0;
    end else if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        w4_V_address0 = grp_dense_latency_ap_fixed_ap_fixed_config4_0_0_fu_241_w4_V_address0;
    end else begin
        w4_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state7))) begin
        w4_V_address1 = 1'd1;
    end else if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        w4_V_address1 = grp_dense_latency_ap_fixed_ap_fixed_config4_0_0_fu_241_w4_V_address1;
    end else begin
        w4_V_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state7))) begin
        w4_V_ce0 = 1'b1;
    end else if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        w4_V_ce0 = grp_dense_latency_ap_fixed_ap_fixed_config4_0_0_fu_241_w4_V_ce0;
    end else begin
        w4_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state7))) begin
        w4_V_ce1 = 1'b1;
    end else if (((1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3))) begin
        w4_V_ce1 = grp_dense_latency_ap_fixed_ap_fixed_config4_0_0_fu_241_w4_V_ce1;
    end else begin
        w4_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        w4_V_we0 = 1'b1;
    end else begin
        w4_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        w4_V_we1 = 1'b1;
    end else begin
        w4_V_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((fc1_input_V_ap_vld_in_sig == 1'b0) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Range1_all_ones_fu_855_p2 = ((tmp_2_i_fu_846_p4 == 6'd63) ? 1'b1 : 1'b0);

assign Range1_all_zeros_fu_861_p2 = ((tmp_2_i_fu_846_p4 == 6'd0) ? 1'b1 : 1'b0);

assign Range2_all_ones_2_fu_618_p3 = select_ln340_5_fu_538_p3[32'd15];

assign Range2_all_ones_fu_840_p2 = ((tmp_i_fu_831_p4 == 5'd31) ? 1'b1 : 1'b0);

assign add_ln1118_1_fu_1294_p2 = ($signed(sext_ln1118_1_fu_1278_p1) + $signed(sext_ln1118_2_fu_1290_p1));

assign add_ln1118_2_fu_1579_p2 = ($signed(sext_ln1118_12_fu_1575_p1) + $signed(sext_ln1118_11_fu_1564_p1));

assign add_ln1118_3_fu_1438_p2 = ($signed(sext_ln1118_4_fu_1422_p1) + $signed(sext_ln1118_5_fu_1434_p1));

assign add_ln1118_fu_1523_p2 = ($signed(sext_ln1118_9_fu_1519_p1) + $signed(sext_ln1118_8_fu_1508_p1));

assign add_ln415_1_fu_1081_p2 = (trunc_ln708_9_fu_1054_p4 + zext_ln415_3_fu_1077_p1);

assign add_ln415_fu_941_p2 = (trunc_ln708_7_fu_914_p4 + zext_ln415_2_fu_937_p1);

assign and_ln416_1_fu_1101_p2 = (xor_ln416_4_fu_1095_p2 & tmp_25_fu_1063_p3);

assign and_ln416_fu_961_p2 = (xor_ln416_fu_955_p2 & tmp_19_fu_923_p3);

assign and_ln779_1_fu_1024_p2 = (xor_ln779_2_fu_1018_p2 & icmp_ln879_fu_984_p2);

assign and_ln779_2_fu_1164_p2 = (xor_ln779_3_fu_1158_p2 & icmp_ln879_2_fu_1124_p2);

assign and_ln779_fu_880_p2 = (xor_ln779_fu_874_p2 & Range2_all_ones_fu_840_p2);

assign and_ln781_1_fu_658_p2 = (carry_3_fu_604_p2 & Range2_all_ones_2_fu_618_p3);

assign and_ln781_2_fu_1189_p2 = (icmp_ln879_1_reg_1797 & and_ln416_reg_1786);

assign and_ln781_3_fu_1333_p2 = (icmp_ln879_3_reg_1837 & and_ln416_1_reg_1826);

assign and_ln781_fu_465_p2 = (carry_1_reg_1746 & Range1_all_ones_reg_1757);

assign and_ln785_1_fu_1353_p2 = (xor_ln785_7_fu_1348_p2 & or_ln785_3_fu_1343_p2);

assign and_ln785_fu_1209_p2 = (xor_ln785_5_fu_1204_p2 & or_ln785_2_fu_1199_p2);

assign and_ln786_2_fu_688_p2 = (p_Result_9_fu_610_p3 & or_ln416_fu_652_p2);

assign and_ln786_3_fu_694_p2 = (and_ln786_2_fu_688_p2 & Range2_all_ones_2_fu_618_p3);

assign and_ln786_5_fu_1038_p2 = (tmp_22_fu_967_p3 & select_ln416_fu_1030_p3);

assign and_ln786_6_fu_1226_p2 = (xor_ln786_4_fu_1220_p2 & tmp_18_reg_1774);

assign and_ln786_7_fu_1178_p2 = (tmp_28_fu_1107_p3 & select_ln416_1_fu_1170_p3);

assign and_ln786_8_fu_1370_p2 = (xor_ln786_5_fu_1364_p2 & tmp_24_reg_1814);

assign and_ln786_fu_894_p2 = (p_Result_6_fu_823_p3 & deleted_ones_fu_886_p3);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign ap_NS_fsm_state3 = ap_NS_fsm[32'd2];

always @ (*) begin
    ap_block_state1 = ((fc1_input_V_ap_vld_in_sig == 1'b0) | (ap_start == 1'b0));
end

always @ (*) begin
    ap_block_state1_ignore_call15 = ((fc1_input_V_ap_vld_in_sig == 1'b0) | (ap_start == 1'b0));
end

assign carry_1_fu_817_p2 = (xor_ln416_1_fu_811_p2 & p_Result_5_fu_779_p3);

assign carry_3_fu_604_p2 = (xor_ln416_2_fu_598_p2 & p_Result_8_fu_572_p3);

assign const_size_in_1 = 16'd1;

assign const_size_out_1 = 16'd1;

assign deleted_ones_fu_886_p3 = ((carry_1_fu_817_p2[0:0] === 1'b1) ? and_ln779_fu_880_p2 : Range1_all_ones_fu_855_p2);

assign deleted_zeros_fu_460_p3 = ((carry_1_reg_1746[0:0] === 1'b1) ? Range1_all_ones_reg_1757 : Range1_all_zeros_reg_1763);

assign grp_dense_latency_ap_fixed_ap_fixed_config4_0_0_fu_241_ap_start = grp_dense_latency_ap_fixed_ap_fixed_config4_0_0_fu_241_ap_start_reg;

assign icmp_ln768_1_fu_1145_p2 = ((p_Result_4_1_i_fu_1130_p4 == 6'd0) ? 1'b1 : 1'b0);

assign icmp_ln768_fu_1005_p2 = ((p_Result_4_i9_fu_990_p4 == 6'd0) ? 1'b1 : 1'b0);

assign icmp_ln879_1_fu_999_p2 = ((p_Result_4_i9_fu_990_p4 == 6'd63) ? 1'b1 : 1'b0);

assign icmp_ln879_2_fu_1124_p2 = ((p_Result_3_1_i_fu_1115_p4 == 5'd31) ? 1'b1 : 1'b0);

assign icmp_ln879_3_fu_1139_p2 = ((p_Result_4_1_i_fu_1130_p4 == 6'd63) ? 1'b1 : 1'b0);

assign icmp_ln879_fu_984_p2 = ((p_Result_3_i8_fu_975_p4 == 5'd31) ? 1'b1 : 1'b0);

assign layer2_out_grads_0_V_fu_1262_p3 = ((or_ln340_10_fu_1242_p2[0:0] === 1'b1) ? select_ln340_8_fu_1248_p3 : select_ln388_4_fu_1255_p3);

assign layer2_out_grads_1_V_fu_1406_p3 = ((or_ln340_13_fu_1386_p2[0:0] === 1'b1) ? select_ln340_10_fu_1392_p3 : select_ln388_5_fu_1399_p3);

assign layer5_out_0_V = p_Val2_1_linear_ap_fixed_ap_fixed_16_6_0_0_0_linear_config5_s_fu_263_ap_return;

assign layer5_out_grads_0_V_fu_452_p3 = ((or_ln340_1_fu_430_p2[0:0] === 1'b1) ? select_ln340_2_fu_436_p3 : select_ln388_1_fu_444_p3);

assign layer5_out_ground_truth_V_address0 = 64'd0;

assign lhs_V_fu_290_p1 = $signed(cache2_V_reg_1681);

assign loss_layer5_out_V = storemerge_reg_229;

assign mul_ln1118_2_fu_1626_p0 = sext_ln1116_fu_900_p1;

assign mul_ln1118_3_fu_1639_p0 = sext_ln1116_fu_900_p1;

assign mul_ln1118_4_fu_1659_p0 = sext_ln1118_7_fu_1476_p1;

assign mul_ln1118_fu_1652_p0 = sext_ln1118_7_fu_1476_p1;

assign or_ln340_10_fu_1242_p2 = (or_ln340_9_fu_1237_p2 | and_ln781_2_fu_1189_p2);

assign or_ln340_11_fu_1375_p2 = (and_ln786_8_fu_1370_p2 | and_ln785_1_fu_1353_p2);

assign or_ln340_12_fu_1381_p2 = (xor_ln785_7_fu_1348_p2 | and_ln786_7_reg_1848);

assign or_ln340_13_fu_1386_p2 = (or_ln340_12_fu_1381_p2 | and_ln781_3_fu_1333_p2);

assign or_ln340_1_fu_430_p2 = (xor_ln340_3_fu_424_p2 | p_Result_3_fu_398_p3);

assign or_ln340_2_fu_507_p2 = (underflow_2_fu_502_p2 | overflow_fu_485_p2);

assign or_ln340_3_fu_513_p2 = (xor_ln785_1_fu_480_p2 | and_ln786_reg_1768);

assign or_ln340_4_fu_518_p2 = (or_ln340_3_fu_513_p2 | and_ln781_fu_465_p2);

assign or_ln340_5_fu_718_p2 = (underflow_3_fu_712_p2 | overflow_1_fu_682_p2);

assign or_ln340_6_fu_724_p2 = (xor_ln785_3_fu_676_p2 | and_ln786_3_fu_694_p2);

assign or_ln340_7_fu_730_p2 = (or_ln340_6_fu_724_p2 | and_ln781_1_fu_658_p2);

assign or_ln340_8_fu_1231_p2 = (and_ln786_6_fu_1226_p2 | and_ln785_fu_1209_p2);

assign or_ln340_9_fu_1237_p2 = (xor_ln785_5_fu_1204_p2 | and_ln786_5_reg_1808);

assign or_ln340_fu_347_p2 = (xor_ln340_1_fu_341_p2 | p_Result_1_fu_315_p3);

assign or_ln416_1_fu_646_p2 = (xor_ln416_3_fu_640_p2 | tmp_14_fu_590_p3);

assign or_ln416_fu_652_p2 = (xor_ln779_1_fu_634_p2 | or_ln416_1_fu_646_p2);

assign or_ln785_1_fu_670_p2 = (xor_ln785_2_fu_664_p2 | p_Result_9_fu_610_p3);

assign or_ln785_2_fu_1199_p2 = (xor_ln785_4_fu_1193_p2 | tmp_22_reg_1792);

assign or_ln785_3_fu_1343_p2 = (xor_ln785_6_fu_1337_p2 | tmp_28_reg_1832);

assign or_ln785_fu_475_p2 = (xor_ln785_fu_469_p2 | p_Result_6_reg_1752);

assign or_ln786_1_fu_700_p2 = (and_ln786_3_fu_694_p2 | and_ln781_1_fu_658_p2);

assign or_ln786_2_fu_1215_p2 = (and_ln786_5_reg_1808 | and_ln781_2_fu_1189_p2);

assign or_ln786_3_fu_1359_p2 = (and_ln786_7_reg_1848 | and_ln781_3_fu_1333_p2);

assign or_ln786_fu_491_p2 = (and_ln786_reg_1768 | and_ln781_fu_465_p2);

assign overflow_1_fu_682_p2 = (xor_ln785_3_fu_676_p2 & or_ln785_1_fu_670_p2);

assign overflow_fu_485_p2 = (xor_ln785_1_fu_480_p2 & or_ln785_fu_475_p2);

assign p_Result_1_fu_315_p3 = ret_V_fu_297_p2[32'd15];

assign p_Result_2_fu_386_p3 = r_V_4_fu_380_p2[32'd16];

assign p_Result_3_1_i_fu_1115_p4 = {{mul_ln1118_3_fu_1639_p2[31:27]}};

assign p_Result_3_fu_398_p3 = r_V_4_fu_380_p2[32'd15];

assign p_Result_3_i8_fu_975_p4 = {{mul_ln1118_2_fu_1626_p2[31:27]}};

assign p_Result_4_1_i_fu_1130_p4 = {{mul_ln1118_3_fu_1639_p2[31:26]}};

assign p_Result_4_i9_fu_990_p4 = {{mul_ln1118_2_fu_1626_p2[31:26]}};

assign p_Result_5_fu_779_p3 = r_V_5_fu_1613_p2[32'd25];

assign p_Result_6_fu_823_p3 = p_Val2_9_fu_797_p2[32'd15];

assign p_Result_7_fu_550_p3 = select_ln340_5_fu_538_p3[32'd15];

assign p_Result_8_fu_572_p3 = select_ln340_5_fu_538_p3[32'd15];

assign p_Result_9_fu_610_p3 = p_Val2_11_fu_584_p2[32'd15];

assign p_Result_s_fu_303_p3 = ret_V_fu_297_p2[32'd16];

assign p_Val2_10_fu_568_p1 = $signed(trunc_ln708_3_fu_558_p4);

assign p_Val2_11_fu_584_p2 = ($signed(zext_ln415_1_fu_580_p1) + $signed(p_Val2_10_fu_568_p1));

assign p_Val2_3_fu_311_p1 = ret_V_fu_297_p2[15:0];

assign p_Val2_4_fu_369_p3 = ((or_ln340_fu_347_p2[0:0] === 1'b1) ? select_ln340_fu_353_p3 : select_ln388_fu_361_p3);

assign p_Val2_6_fu_394_p1 = r_V_4_fu_380_p2[15:0];

assign p_Val2_8_fu_770_p4 = {{r_V_5_fu_1613_p2[25:10]}};

assign p_Val2_9_fu_797_p2 = (zext_ln415_fu_793_p1 + p_Val2_8_fu_770_p4);

assign r_V_2_fu_760_p1 = p_Val2_4_reg_1698;

assign r_V_4_fu_380_p2 = ($signed(17'd0) - $signed(r_V_fu_377_p1));

assign r_V_5_fu_1613_p0 = r_V_2_fu_760_p1;

assign r_V_5_fu_1613_p1 = r_V_2_fu_760_p1;

assign r_V_fu_377_p1 = p_Val2_4_reg_1698;

assign ret_V_fu_297_p2 = ($signed(lhs_V_fu_290_p1) - $signed(rhs_V_fu_293_p1));

assign rhs_V_fu_293_p0 = p_Val2_1_linear_ap_fixed_ap_fixed_16_6_0_0_0_linear_config5_s_fu_263_ap_return;

assign rhs_V_fu_293_p1 = rhs_V_fu_293_p0;

assign select_ln340_10_fu_1392_p3 = ((or_ln340_11_fu_1375_p2[0:0] === 1'b1) ? 16'd32767 : add_ln415_1_reg_1820);

assign select_ln340_2_fu_436_p3 = ((xor_ln340_2_fu_418_p2[0:0] === 1'b1) ? 16'd32767 : p_Val2_6_fu_394_p1);

assign select_ln340_4_fu_524_p3 = ((or_ln340_2_fu_507_p2[0:0] === 1'b1) ? 16'd32767 : p_Val2_9_reg_1740);

assign select_ln340_5_fu_538_p3 = ((or_ln340_4_fu_518_p2[0:0] === 1'b1) ? select_ln340_4_fu_524_p3 : select_ln388_2_fu_531_p3);

assign select_ln340_6_fu_736_p3 = ((or_ln340_5_fu_718_p2[0:0] === 1'b1) ? 16'd32767 : p_Val2_11_fu_584_p2);

assign select_ln340_7_fu_752_p3 = ((or_ln340_7_fu_730_p2[0:0] === 1'b1) ? select_ln340_6_fu_736_p3 : select_ln388_3_fu_744_p3);

assign select_ln340_8_fu_1248_p3 = ((or_ln340_8_fu_1231_p2[0:0] === 1'b1) ? 16'd32767 : add_ln415_reg_1780);

assign select_ln340_fu_353_p3 = ((xor_ln340_fu_335_p2[0:0] === 1'b1) ? 16'd32767 : p_Val2_3_fu_311_p1);

assign select_ln388_1_fu_444_p3 = ((underflow_1_fu_412_p2[0:0] === 1'b1) ? 16'd32768 : p_Val2_6_fu_394_p1);

assign select_ln388_2_fu_531_p3 = ((underflow_2_fu_502_p2[0:0] === 1'b1) ? 16'd32768 : p_Val2_9_reg_1740);

assign select_ln388_3_fu_744_p3 = ((underflow_3_fu_712_p2[0:0] === 1'b1) ? 16'd32768 : p_Val2_11_fu_584_p2);

assign select_ln388_4_fu_1255_p3 = ((and_ln786_6_fu_1226_p2[0:0] === 1'b1) ? 16'd32768 : add_ln415_reg_1780);

assign select_ln388_5_fu_1399_p3 = ((and_ln786_8_fu_1370_p2[0:0] === 1'b1) ? 16'd32768 : add_ln415_1_reg_1820);

assign select_ln388_fu_361_p3 = ((underflow_fu_329_p2[0:0] === 1'b1) ? 16'd32768 : p_Val2_3_fu_311_p1);

assign select_ln416_1_fu_1170_p3 = ((and_ln416_1_fu_1101_p2[0:0] === 1'b1) ? and_ln779_2_fu_1164_p2 : icmp_ln879_3_fu_1139_p2);

assign select_ln416_fu_1030_p3 = ((and_ln416_fu_961_p2[0:0] === 1'b1) ? and_ln779_1_fu_1024_p2 : icmp_ln879_1_fu_999_p2);

assign select_ln777_1_fu_1328_p3 = ((and_ln416_1_reg_1826[0:0] === 1'b1) ? icmp_ln879_3_reg_1837 : icmp_ln768_1_reg_1843);

assign select_ln777_fu_1184_p3 = ((and_ln416_reg_1786[0:0] === 1'b1) ? icmp_ln879_1_reg_1797 : icmp_ln768_reg_1803);

assign sext_ln1116_fu_900_p1 = $signed(layer4_out_grads_0_V_reg_218);

assign sext_ln1118_11_fu_1564_p1 = $signed(shl_ln1118_5_fu_1557_p3);

assign sext_ln1118_12_fu_1575_p1 = $signed(shl_ln1118_6_fu_1568_p3);

assign sext_ln1118_1_fu_1278_p1 = $signed(shl_ln1118_1_fu_1270_p3);

assign sext_ln1118_2_fu_1290_p1 = $signed(shl_ln1118_2_fu_1282_p3);

assign sext_ln1118_4_fu_1422_p1 = $signed(shl_ln1118_3_fu_1414_p3);

assign sext_ln1118_5_fu_1434_p1 = $signed(shl_ln1118_7_fu_1426_p3);

assign sext_ln1118_7_fu_1476_p1 = fc1_input_V_read_reg_1670;

assign sext_ln1118_8_fu_1508_p1 = $signed(shl_ln_fu_1501_p3);

assign sext_ln1118_9_fu_1519_p1 = $signed(shl_ln1118_4_fu_1512_p3);

assign sext_ln1193_1_fu_1451_p1 = $signed(add_ln1118_3_fu_1438_p2);

assign sext_ln1193_2_fu_1536_p1 = $signed(add_ln1118_fu_1523_p2);

assign sext_ln1193_3_fu_1592_p1 = $signed(add_ln1118_2_fu_1579_p2);

assign sext_ln1193_fu_1307_p1 = $signed(add_ln1118_1_fu_1294_p2);

assign shl_ln1118_1_fu_1270_p3 = {{layer2_out_grads_0_V_fu_1262_p3}, {3'd0}};

assign shl_ln1118_2_fu_1282_p3 = {{layer2_out_grads_0_V_fu_1262_p3}, {1'd0}};

assign shl_ln1118_3_fu_1414_p3 = {{layer2_out_grads_1_V_fu_1406_p3}, {3'd0}};

assign shl_ln1118_4_fu_1512_p3 = {{tmp_reg_1854}, {1'd0}};

assign shl_ln1118_5_fu_1557_p3 = {{tmp_2_reg_1860}, {3'd0}};

assign shl_ln1118_6_fu_1568_p3 = {{tmp_2_reg_1860}, {1'd0}};

assign shl_ln1118_7_fu_1426_p3 = {{layer2_out_grads_1_V_fu_1406_p3}, {1'd0}};

assign shl_ln1_fu_1529_p3 = {{w2_V_load_reg_1704}, {15'd0}};

assign shl_ln728_1_fu_1300_p3 = {{w4_V_load_reg_1724}, {15'd0}};

assign shl_ln728_2_fu_1585_p3 = {{w2_V_load_1_reg_1709}, {15'd0}};

assign shl_ln728_3_fu_1444_p3 = {{w4_V_load_1_reg_1729}, {15'd0}};

assign shl_ln_fu_1501_p3 = {{tmp_reg_1854}, {3'd0}};

assign sub_ln1193_2_fu_1596_p2 = ($signed(shl_ln728_2_fu_1585_p3) - $signed(sext_ln1193_3_fu_1592_p1));

assign sub_ln1193_3_fu_1311_p2 = ($signed(shl_ln728_1_fu_1300_p3) - $signed(sext_ln1193_fu_1307_p1));

assign sub_ln1193_4_fu_1455_p2 = ($signed(shl_ln728_3_fu_1444_p3) - $signed(sext_ln1193_1_fu_1451_p1));

assign sub_ln1193_fu_1540_p2 = ($signed(shl_ln1_fu_1529_p3) - $signed(sext_ln1193_2_fu_1536_p1));

assign tmp_11_fu_867_p3 = r_V_5_fu_1613_p2[32'd26];

assign tmp_14_fu_590_p3 = p_Val2_11_fu_584_p2[32'd15];

assign tmp_17_fu_626_p3 = select_ln340_5_fu_538_p3[32'd15];

assign tmp_19_fu_923_p3 = mul_ln1118_2_fu_1626_p2[32'd25];

assign tmp_20_fu_930_p3 = mul_ln1118_2_fu_1626_p2[32'd9];

assign tmp_21_fu_947_p3 = add_ln415_fu_941_p2[32'd15];

assign tmp_22_fu_967_p3 = add_ln415_fu_941_p2[32'd15];

assign tmp_23_fu_1011_p3 = mul_ln1118_2_fu_1626_p2[32'd26];

assign tmp_25_fu_1063_p3 = mul_ln1118_3_fu_1639_p2[32'd25];

assign tmp_26_fu_1070_p3 = mul_ln1118_3_fu_1639_p2[32'd9];

assign tmp_27_fu_1087_p3 = add_ln415_1_fu_1081_p2[32'd15];

assign tmp_28_fu_1107_p3 = add_ln415_1_fu_1081_p2[32'd15];

assign tmp_29_fu_1151_p3 = mul_ln1118_3_fu_1639_p2[32'd26];

assign tmp_2_i_fu_846_p4 = {{r_V_5_fu_1613_p2[31:26]}};

assign tmp_8_fu_786_p3 = r_V_5_fu_1613_p2[32'd9];

assign tmp_9_fu_803_p3 = p_Val2_9_fu_797_p2[32'd15];

assign tmp_i_fu_831_p4 = {{r_V_5_fu_1613_p2[31:27]}};

assign trunc_ln1118_fu_546_p1 = select_ln340_5_fu_538_p3[0:0];

assign trunc_ln708_3_fu_558_p4 = {{select_ln340_5_fu_538_p3[15:1]}};

assign trunc_ln708_7_fu_914_p4 = {{mul_ln1118_2_fu_1626_p2[25:10]}};

assign trunc_ln708_9_fu_1054_p4 = {{mul_ln1118_3_fu_1639_p2[25:10]}};

assign underflow_1_fu_412_p2 = (xor_ln786_1_fu_406_p2 & p_Result_2_fu_386_p3);

assign underflow_2_fu_502_p2 = (xor_ln786_2_fu_496_p2 & p_Result_4_reg_1734);

assign underflow_3_fu_712_p2 = (xor_ln786_3_fu_706_p2 & p_Result_7_fu_550_p3);

assign underflow_fu_329_p2 = (xor_ln786_fu_323_p2 & p_Result_s_fu_303_p3);

assign w2_V_d0 = {{sub_ln1193_fu_1540_p2[20:15]}};

assign w2_V_d1 = {{sub_ln1193_2_fu_1596_p2[20:15]}};

assign w4_V_d0 = {{sub_ln1193_3_fu_1311_p2[20:15]}};

assign w4_V_d1 = {{sub_ln1193_4_fu_1455_p2[20:15]}};

assign xor_ln340_1_fu_341_p2 = (p_Result_s_fu_303_p3 ^ 1'd1);

assign xor_ln340_2_fu_418_p2 = (p_Result_3_fu_398_p3 ^ p_Result_2_fu_386_p3);

assign xor_ln340_3_fu_424_p2 = (p_Result_2_fu_386_p3 ^ 1'd1);

assign xor_ln340_fu_335_p2 = (p_Result_s_fu_303_p3 ^ p_Result_1_fu_315_p3);

assign xor_ln416_1_fu_811_p2 = (tmp_9_fu_803_p3 ^ 1'd1);

assign xor_ln416_2_fu_598_p2 = (tmp_14_fu_590_p3 ^ 1'd1);

assign xor_ln416_3_fu_640_p2 = (p_Result_8_fu_572_p3 ^ 1'd1);

assign xor_ln416_4_fu_1095_p2 = (tmp_27_fu_1087_p3 ^ 1'd1);

assign xor_ln416_fu_955_p2 = (tmp_21_fu_947_p3 ^ 1'd1);

assign xor_ln779_1_fu_634_p2 = (tmp_17_fu_626_p3 ^ 1'd1);

assign xor_ln779_2_fu_1018_p2 = (tmp_23_fu_1011_p3 ^ 1'd1);

assign xor_ln779_3_fu_1158_p2 = (tmp_29_fu_1151_p3 ^ 1'd1);

assign xor_ln779_fu_874_p2 = (tmp_11_fu_867_p3 ^ 1'd1);

assign xor_ln785_1_fu_480_p2 = (p_Result_4_reg_1734 ^ 1'd1);

assign xor_ln785_2_fu_664_p2 = (carry_3_fu_604_p2 ^ Range2_all_ones_2_fu_618_p3);

assign xor_ln785_3_fu_676_p2 = (p_Result_7_fu_550_p3 ^ 1'd1);

assign xor_ln785_4_fu_1193_p2 = (select_ln777_fu_1184_p3 ^ 1'd1);

assign xor_ln785_5_fu_1204_p2 = (tmp_18_reg_1774 ^ 1'd1);

assign xor_ln785_6_fu_1337_p2 = (select_ln777_1_fu_1328_p3 ^ 1'd1);

assign xor_ln785_7_fu_1348_p2 = (tmp_24_reg_1814 ^ 1'd1);

assign xor_ln785_fu_469_p2 = (deleted_zeros_fu_460_p3 ^ 1'd1);

assign xor_ln786_1_fu_406_p2 = (p_Result_3_fu_398_p3 ^ 1'd1);

assign xor_ln786_2_fu_496_p2 = (or_ln786_fu_491_p2 ^ 1'd1);

assign xor_ln786_3_fu_706_p2 = (or_ln786_1_fu_700_p2 ^ 1'd1);

assign xor_ln786_4_fu_1220_p2 = (or_ln786_2_fu_1215_p2 ^ 1'd1);

assign xor_ln786_5_fu_1364_p2 = (or_ln786_3_fu_1359_p2 ^ 1'd1);

assign xor_ln786_fu_323_p2 = (p_Result_1_fu_315_p3 ^ 1'd1);

assign zext_ln415_1_fu_580_p1 = trunc_ln1118_fu_546_p1;

assign zext_ln415_2_fu_937_p1 = tmp_20_fu_930_p3;

assign zext_ln415_3_fu_1077_p1 = tmp_26_fu_1070_p3;

assign zext_ln415_fu_793_p1 = tmp_8_fu_786_p3;

endmodule //myproject
