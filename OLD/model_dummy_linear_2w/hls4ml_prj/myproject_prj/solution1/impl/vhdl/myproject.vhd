-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity myproject is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    fc1_input_V_ap_vld : IN STD_LOGIC;
    fc1_input_V : IN STD_LOGIC_VECTOR (15 downto 0);
    layer3_out_0_V : OUT STD_LOGIC_VECTOR (15 downto 0);
    layer3_out_0_V_ap_vld : OUT STD_LOGIC;
    layer3_out_1_V : OUT STD_LOGIC_VECTOR (15 downto 0);
    layer3_out_1_V_ap_vld : OUT STD_LOGIC;
    loss_layer3_out_V : OUT STD_LOGIC_VECTOR (15 downto 0);
    loss_layer3_out_V_ap_vld : OUT STD_LOGIC;
    const_size_in_1 : OUT STD_LOGIC_VECTOR (15 downto 0);
    const_size_in_1_ap_vld : OUT STD_LOGIC;
    const_size_out_1 : OUT STD_LOGIC_VECTOR (15 downto 0);
    const_size_out_1_ap_vld : OUT STD_LOGIC;
    layer3_out_ground_truth_V_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    layer3_out_ground_truth_V_ce0 : OUT STD_LOGIC;
    layer3_out_ground_truth_V_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    layer3_out_ground_truth_V_address1 : OUT STD_LOGIC_VECTOR (0 downto 0);
    layer3_out_ground_truth_V_ce1 : OUT STD_LOGIC;
    layer3_out_ground_truth_V_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
    train : IN STD_LOGIC );
end;


architecture behav of myproject is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "myproject,hls_ip_2019_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xcu250-figd2104-2L-e,HLS_INPUT_CLOCK=5.000000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=4.221000,HLS_SYN_LAT=4,HLS_SYN_TPT=1,HLS_SYN_MEM=0,HLS_SYN_DSP=2,HLS_SYN_FF=383,HLS_SYN_LUT=647,HLS_VERSION=2019_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_lv16_2 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000010";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal fc1_input_V_ap_vld_in_sig : STD_LOGIC;
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal fc1_input_V_preg : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal fc1_input_V_in_sig : STD_LOGIC_VECTOR (15 downto 0);
    signal fc1_input_V_ap_vld_preg : STD_LOGIC := '0';
    signal fc1_input_V_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal train_read_read_fu_58_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal train_read_reg_146 : STD_LOGIC_VECTOR (0 downto 0);
    signal train_read_reg_146_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal train_read_reg_146_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal train_read_reg_146_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal layer2_out_0_V_dense_latency_ap_fixed_ap_fixed_config2_0_0_0_fu_130_ap_return : STD_LOGIC_VECTOR (14 downto 0);
    signal layer2_out_0_V_reg_150 : STD_LOGIC_VECTOR (14 downto 0);
    signal call_ret2_linear_ap_fixed_ap_fixed_16_6_0_0_0_linear_config3_s_fu_136_ap_return : STD_LOGIC_VECTOR (15 downto 0);
    signal call_ret2_reg_155 : STD_LOGIC_VECTOR (15 downto 0);
    signal call_ret2_reg_155_pp0_iter2_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal call_ret2_reg_155_pp0_iter3_reg : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal grp_mse_ap_fixed_16_6_0_0_0_mse_config_s_fu_120_ap_start : STD_LOGIC;
    signal grp_mse_ap_fixed_16_6_0_0_0_mse_config_s_fu_120_ap_done : STD_LOGIC;
    signal grp_mse_ap_fixed_16_6_0_0_0_mse_config_s_fu_120_ap_idle : STD_LOGIC;
    signal grp_mse_ap_fixed_16_6_0_0_0_mse_config_s_fu_120_ap_ready : STD_LOGIC;
    signal grp_mse_ap_fixed_16_6_0_0_0_mse_config_s_fu_120_ap_ce : STD_LOGIC;
    signal grp_mse_ap_fixed_16_6_0_0_0_mse_config_s_fu_120_ground_truth_V_address0 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_mse_ap_fixed_16_6_0_0_0_mse_config_s_fu_120_ground_truth_V_ce0 : STD_LOGIC;
    signal grp_mse_ap_fixed_16_6_0_0_0_mse_config_s_fu_120_ground_truth_V_address1 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_mse_ap_fixed_16_6_0_0_0_mse_config_s_fu_120_ground_truth_V_ce1 : STD_LOGIC;
    signal grp_mse_ap_fixed_16_6_0_0_0_mse_config_s_fu_120_ap_return : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_state1_pp0_stage0_iter0_ignore_call0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1_ignore_call0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2_ignore_call0 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter3_ignore_call0 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter4_ignore_call0 : BOOLEAN;
    signal ap_block_pp0_stage0_11001_ignoreCallOp12 : BOOLEAN;
    signal layer2_out_0_V_dense_latency_ap_fixed_ap_fixed_config2_0_0_0_fu_130_ap_ready : STD_LOGIC;
    signal call_ret2_linear_ap_fixed_ap_fixed_16_6_0_0_0_linear_config3_s_fu_136_ap_ready : STD_LOGIC;
    signal call_ret2_linear_ap_fixed_ap_fixed_16_6_0_0_0_linear_config3_s_fu_136_data_0_V_read : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_mux_storemerge_phi_fu_112_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_reg_pp0_iter4_storemerge_reg_108 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_reg_pp0_iter0_storemerge_reg_108 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_reg_pp0_iter1_storemerge_reg_108 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_reg_pp0_iter2_storemerge_reg_108 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_phi_reg_pp0_iter3_storemerge_reg_108 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_mse_ap_fixed_16_6_0_0_0_mse_config_s_fu_120_ap_start_reg : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_idle_pp0_0to3 : STD_LOGIC;
    signal ap_reset_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_condition_54 : BOOLEAN;

    component mse_ap_fixed_16_6_0_0_0_mse_config_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_ce : IN STD_LOGIC;
        predictions_0_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        predictions_1_V_read : IN STD_LOGIC_VECTOR (0 downto 0);
        ground_truth_V_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
        ground_truth_V_ce0 : OUT STD_LOGIC;
        ground_truth_V_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
        ground_truth_V_address1 : OUT STD_LOGIC_VECTOR (0 downto 0);
        ground_truth_V_ce1 : OUT STD_LOGIC;
        ground_truth_V_q1 : IN STD_LOGIC_VECTOR (15 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component dense_latency_ap_fixed_ap_fixed_config2_0_0_0 IS
    port (
        ap_ready : OUT STD_LOGIC;
        data_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (14 downto 0) );
    end component;


    component linear_ap_fixed_ap_fixed_16_6_0_0_0_linear_config3_s IS
    port (
        ap_ready : OUT STD_LOGIC;
        data_0_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;



begin
    grp_mse_ap_fixed_16_6_0_0_0_mse_config_s_fu_120 : component mse_ap_fixed_16_6_0_0_0_mse_config_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_mse_ap_fixed_16_6_0_0_0_mse_config_s_fu_120_ap_start,
        ap_done => grp_mse_ap_fixed_16_6_0_0_0_mse_config_s_fu_120_ap_done,
        ap_idle => grp_mse_ap_fixed_16_6_0_0_0_mse_config_s_fu_120_ap_idle,
        ap_ready => grp_mse_ap_fixed_16_6_0_0_0_mse_config_s_fu_120_ap_ready,
        ap_ce => grp_mse_ap_fixed_16_6_0_0_0_mse_config_s_fu_120_ap_ce,
        predictions_0_V_read => call_ret2_linear_ap_fixed_ap_fixed_16_6_0_0_0_linear_config3_s_fu_136_ap_return,
        predictions_1_V_read => ap_const_lv1_0,
        ground_truth_V_address0 => grp_mse_ap_fixed_16_6_0_0_0_mse_config_s_fu_120_ground_truth_V_address0,
        ground_truth_V_ce0 => grp_mse_ap_fixed_16_6_0_0_0_mse_config_s_fu_120_ground_truth_V_ce0,
        ground_truth_V_q0 => layer3_out_ground_truth_V_q0,
        ground_truth_V_address1 => grp_mse_ap_fixed_16_6_0_0_0_mse_config_s_fu_120_ground_truth_V_address1,
        ground_truth_V_ce1 => grp_mse_ap_fixed_16_6_0_0_0_mse_config_s_fu_120_ground_truth_V_ce1,
        ground_truth_V_q1 => layer3_out_ground_truth_V_q1,
        ap_return => grp_mse_ap_fixed_16_6_0_0_0_mse_config_s_fu_120_ap_return);

    layer2_out_0_V_dense_latency_ap_fixed_ap_fixed_config2_0_0_0_fu_130 : component dense_latency_ap_fixed_ap_fixed_config2_0_0_0
    port map (
        ap_ready => layer2_out_0_V_dense_latency_ap_fixed_ap_fixed_config2_0_0_0_fu_130_ap_ready,
        data_V_read => fc1_input_V_in_sig,
        ap_return => layer2_out_0_V_dense_latency_ap_fixed_ap_fixed_config2_0_0_0_fu_130_ap_return);

    call_ret2_linear_ap_fixed_ap_fixed_16_6_0_0_0_linear_config3_s_fu_136 : component linear_ap_fixed_ap_fixed_16_6_0_0_0_linear_config3_s
    port map (
        ap_ready => call_ret2_linear_ap_fixed_ap_fixed_16_6_0_0_0_linear_config3_s_fu_136_ap_ready,
        data_0_V_read => call_ret2_linear_ap_fixed_ap_fixed_16_6_0_0_0_linear_config3_s_fu_136_data_0_V_read,
        ap_return => call_ret2_linear_ap_fixed_ap_fixed_16_6_0_0_0_linear_config3_s_fu_136_ap_return);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    fc1_input_V_ap_vld_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                fc1_input_V_ap_vld_preg <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    fc1_input_V_ap_vld_preg <= ap_const_logic_0;
                elsif ((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) and (fc1_input_V_ap_vld = ap_const_logic_1))) then 
                    fc1_input_V_ap_vld_preg <= fc1_input_V_ap_vld;
                end if; 
            end if;
        end if;
    end process;


    fc1_input_V_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                fc1_input_V_preg <= ap_const_lv16_0;
            else
                if ((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) and (fc1_input_V_ap_vld = ap_const_logic_1))) then 
                    fc1_input_V_preg <= fc1_input_V;
                end if; 
            end if;
        end if;
    end process;


    grp_mse_ap_fixed_16_6_0_0_0_mse_config_s_fu_120_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_mse_ap_fixed_16_6_0_0_0_mse_config_s_fu_120_ap_start_reg <= ap_const_logic_0;
            else
                if (((train_read_read_fu_58_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    grp_mse_ap_fixed_16_6_0_0_0_mse_config_s_fu_120_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_mse_ap_fixed_16_6_0_0_0_mse_config_s_fu_120_ap_ready = ap_const_logic_1)) then 
                    grp_mse_ap_fixed_16_6_0_0_0_mse_config_s_fu_120_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_phi_reg_pp0_iter1_storemerge_reg_108_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_54)) then
                if ((train_read_read_fu_58_p2 = ap_const_lv1_0)) then 
                    ap_phi_reg_pp0_iter1_storemerge_reg_108 <= ap_const_lv16_0;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    ap_phi_reg_pp0_iter1_storemerge_reg_108 <= ap_phi_reg_pp0_iter0_storemerge_reg_108;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_phi_reg_pp0_iter2_storemerge_reg_108 <= ap_phi_reg_pp0_iter1_storemerge_reg_108;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then
                ap_phi_reg_pp0_iter3_storemerge_reg_108 <= ap_phi_reg_pp0_iter2_storemerge_reg_108;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter3 = ap_const_logic_1))) then
                ap_phi_reg_pp0_iter4_storemerge_reg_108 <= ap_phi_reg_pp0_iter3_storemerge_reg_108;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                call_ret2_reg_155 <= call_ret2_linear_ap_fixed_ap_fixed_16_6_0_0_0_linear_config3_s_fu_136_ap_return;
                layer2_out_0_V_reg_150 <= layer2_out_0_V_dense_latency_ap_fixed_ap_fixed_config2_0_0_0_fu_130_ap_return;
                train_read_reg_146 <= (0=>train, others=>'-');
                train_read_reg_146_pp0_iter1_reg <= train_read_reg_146;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                call_ret2_reg_155_pp0_iter2_reg <= call_ret2_reg_155;
                call_ret2_reg_155_pp0_iter3_reg <= call_ret2_reg_155_pp0_iter2_reg;
                train_read_reg_146_pp0_iter2_reg <= train_read_reg_146_pp0_iter1_reg;
                train_read_reg_146_pp0_iter3_reg <= train_read_reg_146_pp0_iter2_reg;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage0_subdone, ap_reset_idle_pp0)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_start, fc1_input_V_ap_vld_in_sig)
    begin
                ap_block_pp0_stage0_01001 <= ((ap_start = ap_const_logic_1) and ((ap_start = ap_const_logic_0) or (fc1_input_V_ap_vld_in_sig = ap_const_logic_0)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_start, fc1_input_V_ap_vld_in_sig)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_start = ap_const_logic_1) and ((ap_start = ap_const_logic_0) or (fc1_input_V_ap_vld_in_sig = ap_const_logic_0)));
    end process;


    ap_block_pp0_stage0_11001_ignoreCallOp12_assign_proc : process(ap_start, fc1_input_V_ap_vld_in_sig)
    begin
                ap_block_pp0_stage0_11001_ignoreCallOp12 <= ((ap_start = ap_const_logic_1) and ((ap_start = ap_const_logic_0) or (fc1_input_V_ap_vld_in_sig = ap_const_logic_0)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_start, fc1_input_V_ap_vld_in_sig)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_start = ap_const_logic_1) and ((ap_start = ap_const_logic_0) or (fc1_input_V_ap_vld_in_sig = ap_const_logic_0)));
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_start, fc1_input_V_ap_vld_in_sig)
    begin
                ap_block_state1_pp0_stage0_iter0 <= ((ap_start = ap_const_logic_0) or (fc1_input_V_ap_vld_in_sig = ap_const_logic_0));
    end process;


    ap_block_state1_pp0_stage0_iter0_ignore_call0_assign_proc : process(ap_start, fc1_input_V_ap_vld_in_sig)
    begin
                ap_block_state1_pp0_stage0_iter0_ignore_call0 <= ((ap_start = ap_const_logic_0) or (fc1_input_V_ap_vld_in_sig = ap_const_logic_0));
    end process;

        ap_block_state2_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter1_ignore_call0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter2_ignore_call0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter3_ignore_call0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter4_ignore_call0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_54_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
                ap_condition_54 <= ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_done_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start;

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_idle_pp0)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to3_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0_0to3 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_storemerge_phi_fu_112_p4_assign_proc : process(train_read_reg_146_pp0_iter3_reg, grp_mse_ap_fixed_16_6_0_0_0_mse_config_s_fu_120_ap_return, ap_phi_reg_pp0_iter4_storemerge_reg_108)
    begin
        if ((train_read_reg_146_pp0_iter3_reg = ap_const_lv1_1)) then 
            ap_phi_mux_storemerge_phi_fu_112_p4 <= grp_mse_ap_fixed_16_6_0_0_0_mse_config_s_fu_120_ap_return;
        else 
            ap_phi_mux_storemerge_phi_fu_112_p4 <= ap_phi_reg_pp0_iter4_storemerge_reg_108;
        end if; 
    end process;

    ap_phi_reg_pp0_iter0_storemerge_reg_108 <= "XXXXXXXXXXXXXXXX";

    ap_ready_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_reset_idle_pp0_assign_proc : process(ap_start, ap_idle_pp0_0to3)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_idle_pp0_0to3 = ap_const_logic_1))) then 
            ap_reset_idle_pp0 <= ap_const_logic_1;
        else 
            ap_reset_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

        call_ret2_linear_ap_fixed_ap_fixed_16_6_0_0_0_linear_config3_s_fu_136_data_0_V_read <= std_logic_vector(IEEE.numeric_std.resize(signed(layer2_out_0_V_reg_150),16));

    const_size_in_1 <= ap_const_lv16_1;

    const_size_in_1_ap_vld_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            const_size_in_1_ap_vld <= ap_const_logic_1;
        else 
            const_size_in_1_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    const_size_out_1 <= ap_const_lv16_2;

    const_size_out_1_ap_vld_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            const_size_out_1_ap_vld <= ap_const_logic_1;
        else 
            const_size_out_1_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    fc1_input_V_ap_vld_in_sig_assign_proc : process(fc1_input_V_ap_vld, fc1_input_V_ap_vld_preg)
    begin
        if ((fc1_input_V_ap_vld = ap_const_logic_1)) then 
            fc1_input_V_ap_vld_in_sig <= fc1_input_V_ap_vld;
        else 
            fc1_input_V_ap_vld_in_sig <= fc1_input_V_ap_vld_preg;
        end if; 
    end process;


    fc1_input_V_blk_n_assign_proc : process(ap_start, ap_CS_fsm_pp0_stage0, fc1_input_V_ap_vld, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_start = ap_const_logic_1) and (ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            fc1_input_V_blk_n <= fc1_input_V_ap_vld;
        else 
            fc1_input_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    fc1_input_V_in_sig_assign_proc : process(fc1_input_V_ap_vld, fc1_input_V, fc1_input_V_preg)
    begin
        if ((fc1_input_V_ap_vld = ap_const_logic_1)) then 
            fc1_input_V_in_sig <= fc1_input_V;
        else 
            fc1_input_V_in_sig <= fc1_input_V_preg;
        end if; 
    end process;


    grp_mse_ap_fixed_16_6_0_0_0_mse_config_s_fu_120_ap_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001_ignoreCallOp12)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001_ignoreCallOp12))) then 
            grp_mse_ap_fixed_16_6_0_0_0_mse_config_s_fu_120_ap_ce <= ap_const_logic_1;
        else 
            grp_mse_ap_fixed_16_6_0_0_0_mse_config_s_fu_120_ap_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_mse_ap_fixed_16_6_0_0_0_mse_config_s_fu_120_ap_start <= grp_mse_ap_fixed_16_6_0_0_0_mse_config_s_fu_120_ap_start_reg;
    layer3_out_0_V <= call_ret2_reg_155_pp0_iter3_reg;

    layer3_out_0_V_ap_vld_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            layer3_out_0_V_ap_vld <= ap_const_logic_1;
        else 
            layer3_out_0_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    layer3_out_1_V <= ap_const_lv16_0;

    layer3_out_1_V_ap_vld_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            layer3_out_1_V_ap_vld <= ap_const_logic_1;
        else 
            layer3_out_1_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    layer3_out_ground_truth_V_address0 <= grp_mse_ap_fixed_16_6_0_0_0_mse_config_s_fu_120_ground_truth_V_address0;
    layer3_out_ground_truth_V_address1 <= grp_mse_ap_fixed_16_6_0_0_0_mse_config_s_fu_120_ground_truth_V_address1;
    layer3_out_ground_truth_V_ce0 <= grp_mse_ap_fixed_16_6_0_0_0_mse_config_s_fu_120_ground_truth_V_ce0;
    layer3_out_ground_truth_V_ce1 <= grp_mse_ap_fixed_16_6_0_0_0_mse_config_s_fu_120_ground_truth_V_ce1;
    loss_layer3_out_V <= ap_phi_mux_storemerge_phi_fu_112_p4;

    loss_layer3_out_V_ap_vld_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter4 = ap_const_logic_1))) then 
            loss_layer3_out_V_ap_vld <= ap_const_logic_1;
        else 
            loss_layer3_out_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    train_read_read_fu_58_p2 <= (0=>train, others=>'-');
end behav;
