// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module mse_ap_fixed_16_6_0_0_0_mse_config_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        ap_ce,
        predictions_0_V_read,
        predictions_1_V_read,
        ground_truth_V_address0,
        ground_truth_V_ce0,
        ground_truth_V_q0,
        ground_truth_V_address1,
        ground_truth_V_ce1,
        ground_truth_V_q1,
        ap_return
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input   ap_ce;
input  [15:0] predictions_0_V_read;
input  [0:0] predictions_1_V_read;
output  [0:0] ground_truth_V_address0;
output   ground_truth_V_ce0;
input  [15:0] ground_truth_V_q0;
output  [0:0] ground_truth_V_address1;
output   ground_truth_V_ce1;
input  [15:0] ground_truth_V_q1;
output  [15:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg ground_truth_V_ce0;
reg ground_truth_V_ce1;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_idle_pp0;
reg    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] predictions_1_V_read_1_reg_915;
reg   [15:0] predictions_0_V_read_1_reg_920;
wire  signed [31:0] mul_ln1118_fu_897_p2;
reg  signed [31:0] mul_ln1118_reg_935;
reg   [0:0] tmp_6_reg_941;
reg   [15:0] trunc_ln2_reg_947;
reg   [0:0] tmp_8_reg_952;
reg   [4:0] tmp_reg_957;
reg   [5:0] tmp_2_reg_962;
wire  signed [31:0] mul_ln1118_1_fu_908_p2;
reg  signed [31:0] mul_ln1118_1_reg_968;
reg   [0:0] tmp_14_reg_973;
wire   [15:0] add_ln415_1_fu_486_p2;
reg   [15:0] add_ln415_1_reg_978;
wire   [0:0] and_ln781_2_fu_594_p2;
reg   [0:0] and_ln781_2_reg_984;
wire   [0:0] xor_ln785_5_fu_612_p2;
reg   [0:0] xor_ln785_5_reg_989;
wire   [0:0] and_ln786_4_fu_624_p2;
reg   [0:0] and_ln786_4_reg_994;
wire   [0:0] and_ln786_5_fu_642_p2;
reg   [0:0] and_ln786_5_reg_999;
wire   [0:0] or_ln340_6_fu_648_p2;
reg   [0:0] or_ln340_6_reg_1004;
reg    ap_block_pp0_stage0_subdone;
wire  signed [16:0] sext_ln703_fu_104_p1;
wire  signed [16:0] sext_ln703_1_fu_108_p1;
wire   [16:0] sub_ln1193_fu_111_p2;
wire   [0:0] tmp_5_fu_129_p3;
wire   [0:0] tmp_4_fu_117_p3;
wire   [0:0] xor_ln786_fu_137_p2;
wire   [0:0] xor_ln340_fu_155_p2;
wire   [0:0] xor_ln340_1_fu_149_p2;
wire   [15:0] trunc_ln703_fu_125_p1;
wire   [0:0] and_ln786_1_fu_143_p2;
wire   [0:0] or_ln340_fu_161_p2;
wire   [15:0] select_ln340_fu_167_p3;
wire   [15:0] select_ln388_fu_175_p3;
wire   [15:0] zext_ln39_fu_101_p1;
wire   [15:0] select_ln340_2_fu_183_p3;
wire   [15:0] sub_ln1193_1_fu_191_p2;
wire   [15:0] zext_ln415_fu_260_p1;
wire   [15:0] add_ln415_fu_263_p2;
wire   [0:0] tmp_9_fu_268_p3;
wire   [0:0] tmp_7_fu_253_p3;
wire   [0:0] xor_ln416_1_fu_276_p2;
wire   [0:0] and_ln416_fu_282_p2;
wire   [0:0] icmp_ln879_1_fu_301_p2;
wire   [0:0] icmp_ln768_fu_306_p2;
wire   [0:0] tmp_11_fu_319_p3;
wire   [0:0] icmp_ln879_fu_296_p2;
wire   [0:0] xor_ln779_fu_326_p2;
wire   [0:0] and_ln779_fu_332_p2;
wire   [0:0] select_ln777_fu_311_p3;
wire   [0:0] tmp_10_fu_288_p3;
wire   [0:0] xor_ln785_fu_352_p2;
wire   [0:0] or_ln785_fu_358_p2;
wire   [0:0] xor_ln785_3_fu_364_p2;
wire   [0:0] select_ln416_fu_338_p3;
wire   [0:0] and_ln781_1_fu_346_p2;
wire   [0:0] and_ln786_2_fu_375_p2;
wire   [0:0] or_ln786_fu_381_p2;
wire   [0:0] xor_ln786_1_fu_387_p2;
wire   [0:0] and_ln786_3_fu_393_p2;
wire   [0:0] and_ln785_fu_369_p2;
wire   [0:0] or_ln340_2_fu_404_p2;
wire   [0:0] or_ln340_1_fu_398_p2;
wire   [0:0] or_ln340_5_fu_410_p2;
wire   [15:0] select_ln340_3_fu_416_p3;
wire   [15:0] select_ln388_2_fu_424_p3;
wire   [15:0] select_ln340_5_fu_432_p3;
wire   [25:0] shl_ln_fu_440_p3;
wire  signed [31:0] sext_ln728_fu_448_p1;
(* use_dsp48 = "no" *) wire   [31:0] add_ln1192_fu_452_p2;
wire   [15:0] trunc_ln708_1_fu_465_p4;
wire   [15:0] zext_ln415_1_fu_483_p1;
wire   [0:0] tmp_15_fu_492_p3;
wire   [0:0] tmp_13_fu_475_p3;
wire   [0:0] xor_ln416_2_fu_500_p2;
wire   [4:0] tmp_1_fu_520_p4;
wire   [5:0] tmp_3_fu_536_p4;
wire   [0:0] and_ln416_1_fu_506_p2;
wire   [0:0] icmp_ln879_3_fu_546_p2;
wire   [0:0] icmp_ln768_1_fu_552_p2;
wire   [0:0] tmp_17_fu_566_p3;
wire   [0:0] icmp_ln879_2_fu_530_p2;
wire   [0:0] xor_ln779_1_fu_574_p2;
wire   [0:0] and_ln779_1_fu_580_p2;
wire   [0:0] select_ln777_1_fu_558_p3;
wire   [0:0] tmp_16_fu_512_p3;
wire   [0:0] xor_ln785_4_fu_600_p2;
wire   [0:0] tmp_12_fu_457_p3;
wire   [0:0] or_ln785_1_fu_606_p2;
wire   [0:0] select_ln416_1_fu_586_p3;
wire   [0:0] or_ln786_1_fu_630_p2;
wire   [0:0] xor_ln786_2_fu_636_p2;
wire   [0:0] and_ln785_1_fu_618_p2;
wire   [0:0] or_ln340_7_fu_654_p2;
wire   [0:0] or_ln340_8_fu_658_p2;
wire   [15:0] select_ln340_4_fu_663_p3;
wire   [15:0] select_ln388_3_fu_669_p3;
wire   [15:0] select_ln340_6_fu_675_p3;
wire   [14:0] trunc_ln708_2_fu_695_p4;
wire   [0:0] trunc_ln1118_fu_683_p1;
wire  signed [15:0] p_Val2_s_fu_705_p1;
wire   [15:0] zext_ln415_2_fu_717_p1;
wire   [15:0] p_Val2_1_fu_721_p2;
wire   [0:0] tmp_20_fu_727_p3;
wire   [0:0] p_Result_1_fu_709_p3;
wire   [0:0] xor_ln416_3_fu_735_p2;
wire   [0:0] tmp_23_fu_763_p3;
wire   [0:0] xor_ln416_4_fu_777_p2;
wire   [0:0] or_ln416_1_fu_783_p2;
wire   [0:0] xor_ln779_2_fu_771_p2;
wire   [0:0] carry_1_fu_741_p2;
wire   [0:0] Range2_all_ones_fu_755_p3;
wire   [0:0] p_Result_2_fu_747_p3;
wire   [0:0] xor_ln785_1_fu_801_p2;
wire   [0:0] p_Result_s_fu_687_p3;
wire   [0:0] or_ln785_2_fu_807_p2;
wire   [0:0] xor_ln785_2_fu_813_p2;
wire   [0:0] or_ln416_fu_789_p2;
wire   [0:0] and_ln786_6_fu_825_p2;
wire   [0:0] and_ln781_fu_795_p2;
wire   [0:0] and_ln786_fu_831_p2;
wire   [0:0] or_ln786_2_fu_837_p2;
wire   [0:0] xor_ln786_3_fu_843_p2;
wire   [0:0] underflow_fu_849_p2;
wire   [0:0] overflow_fu_819_p2;
wire   [0:0] or_ln340_9_fu_861_p2;
wire   [0:0] or_ln340_3_fu_855_p2;
wire   [0:0] or_ln340_4_fu_867_p2;
wire   [15:0] select_ln340_1_fu_873_p3;
wire   [15:0] select_ln388_1_fu_881_p3;
wire  signed [15:0] mul_ln1118_fu_897_p0;
wire  signed [31:0] sext_ln1116_fu_197_p1;
wire  signed [15:0] mul_ln1118_fu_897_p1;
wire  signed [15:0] mul_ln1118_1_fu_908_p0;
wire  signed [31:0] sext_ln1116_1_fu_242_p1;
wire  signed [15:0] mul_ln1118_1_fu_908_p1;
reg   [0:0] ap_NS_fsm;
reg    ap_idle_pp0_0to2;
reg    ap_reset_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
end

myproject_mul_mul_16s_16s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 32 ))
myproject_mul_mul_16s_16s_32_1_1_U3(
    .din0(mul_ln1118_fu_897_p0),
    .din1(mul_ln1118_fu_897_p1),
    .dout(mul_ln1118_fu_897_p2)
);

myproject_mul_mul_16s_16s_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 32 ))
myproject_mul_mul_16s_16s_32_1_1_U4(
    .din0(mul_ln1118_1_fu_908_p0),
    .din1(mul_ln1118_1_fu_908_p1),
    .dout(mul_ln1118_1_fu_908_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        add_ln415_1_reg_978 <= add_ln415_1_fu_486_p2;
        and_ln781_2_reg_984 <= and_ln781_2_fu_594_p2;
        and_ln786_4_reg_994 <= and_ln786_4_fu_624_p2;
        and_ln786_5_reg_999 <= and_ln786_5_fu_642_p2;
        or_ln340_6_reg_1004 <= or_ln340_6_fu_648_p2;
        xor_ln785_5_reg_989 <= xor_ln785_5_fu_612_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        mul_ln1118_1_reg_968 <= mul_ln1118_1_fu_908_p2;
        mul_ln1118_reg_935 <= mul_ln1118_fu_897_p2;
        predictions_0_V_read_1_reg_920 <= predictions_0_V_read;
        predictions_1_V_read_1_reg_915 <= predictions_1_V_read;
        tmp_14_reg_973 <= mul_ln1118_1_fu_908_p2[32'd9];
        tmp_2_reg_962 <= {{mul_ln1118_fu_897_p2[31:26]}};
        tmp_6_reg_941 <= mul_ln1118_fu_897_p2[32'd31];
        tmp_8_reg_952 <= mul_ln1118_fu_897_p2[32'd9];
        tmp_reg_957 <= {{mul_ln1118_fu_897_p2[31:27]}};
        trunc_ln2_reg_947 <= {{mul_ln1118_fu_897_p2[25:10]}};
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0_0to2 = 1'b1;
    end else begin
        ap_idle_pp0_0to2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0_0to2 == 1'b1))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ground_truth_V_ce0 = 1'b1;
    end else begin
        ground_truth_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_ce) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ground_truth_V_ce1 = 1'b1;
    end else begin
        ground_truth_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Range2_all_ones_fu_755_p3 = select_ln340_6_fu_675_p3[32'd15];

assign add_ln1192_fu_452_p2 = ($signed(mul_ln1118_1_reg_968) + $signed(sext_ln728_fu_448_p1));

assign add_ln415_1_fu_486_p2 = (trunc_ln708_1_fu_465_p4 + zext_ln415_1_fu_483_p1);

assign add_ln415_fu_263_p2 = (zext_ln415_fu_260_p1 + trunc_ln2_reg_947);

assign and_ln416_1_fu_506_p2 = (xor_ln416_2_fu_500_p2 & tmp_13_fu_475_p3);

assign and_ln416_fu_282_p2 = (xor_ln416_1_fu_276_p2 & tmp_7_fu_253_p3);

assign and_ln779_1_fu_580_p2 = (xor_ln779_1_fu_574_p2 & icmp_ln879_2_fu_530_p2);

assign and_ln779_fu_332_p2 = (xor_ln779_fu_326_p2 & icmp_ln879_fu_296_p2);

assign and_ln781_1_fu_346_p2 = (icmp_ln879_1_fu_301_p2 & and_ln416_fu_282_p2);

assign and_ln781_2_fu_594_p2 = (icmp_ln879_3_fu_546_p2 & and_ln416_1_fu_506_p2);

assign and_ln781_fu_795_p2 = (carry_1_fu_741_p2 & Range2_all_ones_fu_755_p3);

assign and_ln785_1_fu_618_p2 = (xor_ln785_5_fu_612_p2 & or_ln785_1_fu_606_p2);

assign and_ln785_fu_369_p2 = (xor_ln785_3_fu_364_p2 & or_ln785_fu_358_p2);

assign and_ln786_1_fu_143_p2 = (xor_ln786_fu_137_p2 & tmp_4_fu_117_p3);

assign and_ln786_2_fu_375_p2 = (tmp_10_fu_288_p3 & select_ln416_fu_338_p3);

assign and_ln786_3_fu_393_p2 = (xor_ln786_1_fu_387_p2 & tmp_6_reg_941);

assign and_ln786_4_fu_624_p2 = (tmp_16_fu_512_p3 & select_ln416_1_fu_586_p3);

assign and_ln786_5_fu_642_p2 = (xor_ln786_2_fu_636_p2 & tmp_12_fu_457_p3);

assign and_ln786_6_fu_825_p2 = (p_Result_2_fu_747_p3 & or_ln416_fu_789_p2);

assign and_ln786_fu_831_p2 = (and_ln786_6_fu_825_p2 & Range2_all_ones_fu_755_p3);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_start == 1'b0) & (ap_start == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((1'b0 == ap_ce) | ((ap_start == 1'b0) & (ap_start == 1'b1)));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_start == 1'b0);
end

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start;

assign ap_return = ((or_ln340_4_fu_867_p2[0:0] === 1'b1) ? select_ln340_1_fu_873_p3 : select_ln388_1_fu_881_p3);

assign carry_1_fu_741_p2 = (xor_ln416_3_fu_735_p2 & p_Result_1_fu_709_p3);

assign ground_truth_V_address0 = 64'd0;

assign ground_truth_V_address1 = 64'd1;

assign icmp_ln768_1_fu_552_p2 = ((tmp_3_fu_536_p4 == 6'd0) ? 1'b1 : 1'b0);

assign icmp_ln768_fu_306_p2 = ((tmp_2_reg_962 == 6'd0) ? 1'b1 : 1'b0);

assign icmp_ln879_1_fu_301_p2 = ((tmp_2_reg_962 == 6'd63) ? 1'b1 : 1'b0);

assign icmp_ln879_2_fu_530_p2 = ((tmp_1_fu_520_p4 == 5'd31) ? 1'b1 : 1'b0);

assign icmp_ln879_3_fu_546_p2 = ((tmp_3_fu_536_p4 == 6'd63) ? 1'b1 : 1'b0);

assign icmp_ln879_fu_296_p2 = ((tmp_reg_957 == 5'd31) ? 1'b1 : 1'b0);

assign mul_ln1118_1_fu_908_p0 = sext_ln1116_1_fu_242_p1;

assign mul_ln1118_1_fu_908_p1 = sext_ln1116_1_fu_242_p1;

assign mul_ln1118_fu_897_p0 = sext_ln1116_fu_197_p1;

assign mul_ln1118_fu_897_p1 = sext_ln1116_fu_197_p1;

assign or_ln340_1_fu_398_p2 = (and_ln786_3_fu_393_p2 | and_ln785_fu_369_p2);

assign or_ln340_2_fu_404_p2 = (xor_ln785_3_fu_364_p2 | and_ln786_2_fu_375_p2);

assign or_ln340_3_fu_855_p2 = (underflow_fu_849_p2 | overflow_fu_819_p2);

assign or_ln340_4_fu_867_p2 = (or_ln340_9_fu_861_p2 | and_ln781_fu_795_p2);

assign or_ln340_5_fu_410_p2 = (or_ln340_2_fu_404_p2 | and_ln781_1_fu_346_p2);

assign or_ln340_6_fu_648_p2 = (and_ln786_5_fu_642_p2 | and_ln785_1_fu_618_p2);

assign or_ln340_7_fu_654_p2 = (xor_ln785_5_reg_989 | and_ln786_4_reg_994);

assign or_ln340_8_fu_658_p2 = (or_ln340_7_fu_654_p2 | and_ln781_2_reg_984);

assign or_ln340_9_fu_861_p2 = (xor_ln785_2_fu_813_p2 | and_ln786_fu_831_p2);

assign or_ln340_fu_161_p2 = (xor_ln340_fu_155_p2 | tmp_5_fu_129_p3);

assign or_ln416_1_fu_783_p2 = (xor_ln416_4_fu_777_p2 | tmp_20_fu_727_p3);

assign or_ln416_fu_789_p2 = (xor_ln779_2_fu_771_p2 | or_ln416_1_fu_783_p2);

assign or_ln785_1_fu_606_p2 = (xor_ln785_4_fu_600_p2 | tmp_16_fu_512_p3);

assign or_ln785_2_fu_807_p2 = (xor_ln785_1_fu_801_p2 | p_Result_2_fu_747_p3);

assign or_ln785_fu_358_p2 = (xor_ln785_fu_352_p2 | tmp_10_fu_288_p3);

assign or_ln786_1_fu_630_p2 = (and_ln786_4_fu_624_p2 | and_ln781_2_fu_594_p2);

assign or_ln786_2_fu_837_p2 = (and_ln786_fu_831_p2 | and_ln781_fu_795_p2);

assign or_ln786_fu_381_p2 = (and_ln786_2_fu_375_p2 | and_ln781_1_fu_346_p2);

assign overflow_fu_819_p2 = (xor_ln785_2_fu_813_p2 & or_ln785_2_fu_807_p2);

assign p_Result_1_fu_709_p3 = select_ln340_6_fu_675_p3[32'd15];

assign p_Result_2_fu_747_p3 = p_Val2_1_fu_721_p2[32'd15];

assign p_Result_s_fu_687_p3 = select_ln340_6_fu_675_p3[32'd15];

assign p_Val2_1_fu_721_p2 = ($signed(p_Val2_s_fu_705_p1) + $signed(zext_ln415_2_fu_717_p1));

assign p_Val2_s_fu_705_p1 = $signed(trunc_ln708_2_fu_695_p4);

assign select_ln340_1_fu_873_p3 = ((or_ln340_3_fu_855_p2[0:0] === 1'b1) ? 16'd32767 : p_Val2_1_fu_721_p2);

assign select_ln340_2_fu_183_p3 = ((or_ln340_fu_161_p2[0:0] === 1'b1) ? select_ln340_fu_167_p3 : select_ln388_fu_175_p3);

assign select_ln340_3_fu_416_p3 = ((or_ln340_1_fu_398_p2[0:0] === 1'b1) ? 16'd32767 : add_ln415_fu_263_p2);

assign select_ln340_4_fu_663_p3 = ((or_ln340_6_reg_1004[0:0] === 1'b1) ? 16'd32767 : add_ln415_1_reg_978);

assign select_ln340_5_fu_432_p3 = ((or_ln340_5_fu_410_p2[0:0] === 1'b1) ? select_ln340_3_fu_416_p3 : select_ln388_2_fu_424_p3);

assign select_ln340_6_fu_675_p3 = ((or_ln340_8_fu_658_p2[0:0] === 1'b1) ? select_ln340_4_fu_663_p3 : select_ln388_3_fu_669_p3);

assign select_ln340_fu_167_p3 = ((xor_ln340_1_fu_149_p2[0:0] === 1'b1) ? 16'd32767 : trunc_ln703_fu_125_p1);

assign select_ln388_1_fu_881_p3 = ((underflow_fu_849_p2[0:0] === 1'b1) ? 16'd32768 : p_Val2_1_fu_721_p2);

assign select_ln388_2_fu_424_p3 = ((and_ln786_3_fu_393_p2[0:0] === 1'b1) ? 16'd32768 : add_ln415_fu_263_p2);

assign select_ln388_3_fu_669_p3 = ((and_ln786_5_reg_999[0:0] === 1'b1) ? 16'd32768 : add_ln415_1_reg_978);

assign select_ln388_fu_175_p3 = ((and_ln786_1_fu_143_p2[0:0] === 1'b1) ? 16'd32768 : trunc_ln703_fu_125_p1);

assign select_ln416_1_fu_586_p3 = ((and_ln416_1_fu_506_p2[0:0] === 1'b1) ? and_ln779_1_fu_580_p2 : icmp_ln879_3_fu_546_p2);

assign select_ln416_fu_338_p3 = ((and_ln416_fu_282_p2[0:0] === 1'b1) ? and_ln779_fu_332_p2 : icmp_ln879_1_fu_301_p2);

assign select_ln777_1_fu_558_p3 = ((and_ln416_1_fu_506_p2[0:0] === 1'b1) ? icmp_ln879_3_fu_546_p2 : icmp_ln768_1_fu_552_p2);

assign select_ln777_fu_311_p3 = ((and_ln416_fu_282_p2[0:0] === 1'b1) ? icmp_ln879_1_fu_301_p2 : icmp_ln768_fu_306_p2);

assign sext_ln1116_1_fu_242_p1 = $signed(sub_ln1193_1_fu_191_p2);

assign sext_ln1116_fu_197_p1 = $signed(select_ln340_2_fu_183_p3);

assign sext_ln703_1_fu_108_p1 = $signed(predictions_0_V_read_1_reg_920);

assign sext_ln703_fu_104_p1 = $signed(ground_truth_V_q0);

assign sext_ln728_fu_448_p1 = $signed(shl_ln_fu_440_p3);

assign shl_ln_fu_440_p3 = {{select_ln340_5_fu_432_p3}, {10'd0}};

assign sub_ln1193_1_fu_191_p2 = (ground_truth_V_q1 - zext_ln39_fu_101_p1);

assign sub_ln1193_fu_111_p2 = ($signed(sext_ln703_fu_104_p1) - $signed(sext_ln703_1_fu_108_p1));

assign tmp_10_fu_288_p3 = add_ln415_fu_263_p2[32'd15];

assign tmp_11_fu_319_p3 = mul_ln1118_reg_935[32'd26];

assign tmp_12_fu_457_p3 = add_ln1192_fu_452_p2[32'd31];

assign tmp_13_fu_475_p3 = add_ln1192_fu_452_p2[32'd25];

assign tmp_15_fu_492_p3 = add_ln415_1_fu_486_p2[32'd15];

assign tmp_16_fu_512_p3 = add_ln415_1_fu_486_p2[32'd15];

assign tmp_17_fu_566_p3 = add_ln1192_fu_452_p2[32'd26];

assign tmp_1_fu_520_p4 = {{add_ln1192_fu_452_p2[31:27]}};

assign tmp_20_fu_727_p3 = p_Val2_1_fu_721_p2[32'd15];

assign tmp_23_fu_763_p3 = select_ln340_6_fu_675_p3[32'd15];

assign tmp_3_fu_536_p4 = {{add_ln1192_fu_452_p2[31:26]}};

assign tmp_4_fu_117_p3 = sub_ln1193_fu_111_p2[32'd16];

assign tmp_5_fu_129_p3 = sub_ln1193_fu_111_p2[32'd15];

assign tmp_7_fu_253_p3 = mul_ln1118_reg_935[32'd25];

assign tmp_9_fu_268_p3 = add_ln415_fu_263_p2[32'd15];

assign trunc_ln1118_fu_683_p1 = select_ln340_6_fu_675_p3[0:0];

assign trunc_ln703_fu_125_p1 = sub_ln1193_fu_111_p2[15:0];

assign trunc_ln708_1_fu_465_p4 = {{add_ln1192_fu_452_p2[25:10]}};

assign trunc_ln708_2_fu_695_p4 = {{select_ln340_6_fu_675_p3[15:1]}};

assign underflow_fu_849_p2 = (xor_ln786_3_fu_843_p2 & p_Result_s_fu_687_p3);

assign xor_ln340_1_fu_149_p2 = (tmp_5_fu_129_p3 ^ tmp_4_fu_117_p3);

assign xor_ln340_fu_155_p2 = (tmp_4_fu_117_p3 ^ 1'd1);

assign xor_ln416_1_fu_276_p2 = (tmp_9_fu_268_p3 ^ 1'd1);

assign xor_ln416_2_fu_500_p2 = (tmp_15_fu_492_p3 ^ 1'd1);

assign xor_ln416_3_fu_735_p2 = (tmp_20_fu_727_p3 ^ 1'd1);

assign xor_ln416_4_fu_777_p2 = (p_Result_1_fu_709_p3 ^ 1'd1);

assign xor_ln779_1_fu_574_p2 = (tmp_17_fu_566_p3 ^ 1'd1);

assign xor_ln779_2_fu_771_p2 = (tmp_23_fu_763_p3 ^ 1'd1);

assign xor_ln779_fu_326_p2 = (tmp_11_fu_319_p3 ^ 1'd1);

assign xor_ln785_1_fu_801_p2 = (carry_1_fu_741_p2 ^ Range2_all_ones_fu_755_p3);

assign xor_ln785_2_fu_813_p2 = (p_Result_s_fu_687_p3 ^ 1'd1);

assign xor_ln785_3_fu_364_p2 = (tmp_6_reg_941 ^ 1'd1);

assign xor_ln785_4_fu_600_p2 = (select_ln777_1_fu_558_p3 ^ 1'd1);

assign xor_ln785_5_fu_612_p2 = (tmp_12_fu_457_p3 ^ 1'd1);

assign xor_ln785_fu_352_p2 = (select_ln777_fu_311_p3 ^ 1'd1);

assign xor_ln786_1_fu_387_p2 = (or_ln786_fu_381_p2 ^ 1'd1);

assign xor_ln786_2_fu_636_p2 = (or_ln786_1_fu_630_p2 ^ 1'd1);

assign xor_ln786_3_fu_843_p2 = (or_ln786_2_fu_837_p2 ^ 1'd1);

assign xor_ln786_fu_137_p2 = (tmp_5_fu_129_p3 ^ 1'd1);

assign zext_ln39_fu_101_p1 = predictions_1_V_read_1_reg_915;

assign zext_ln415_1_fu_483_p1 = tmp_14_reg_973;

assign zext_ln415_2_fu_717_p1 = trunc_ln1118_fu_683_p1;

assign zext_ln415_fu_260_p1 = tmp_8_reg_952;

endmodule //mse_ap_fixed_16_6_0_0_0_mse_config_s
