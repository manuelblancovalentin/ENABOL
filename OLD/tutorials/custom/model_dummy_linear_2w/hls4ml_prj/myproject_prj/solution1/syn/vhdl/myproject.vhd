-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity myproject is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    fc1_input_V : IN STD_LOGIC_VECTOR (15 downto 0);
    fc1_input_V_ap_vld : IN STD_LOGIC;
    layer5_out_0_V : OUT STD_LOGIC_VECTOR (15 downto 0);
    layer5_out_0_V_ap_vld : OUT STD_LOGIC;
    loss_layer5_out_V : OUT STD_LOGIC_VECTOR (15 downto 0);
    loss_layer5_out_V_ap_vld : OUT STD_LOGIC;
    const_size_in_1 : OUT STD_LOGIC_VECTOR (15 downto 0);
    const_size_in_1_ap_vld : OUT STD_LOGIC;
    const_size_out_1 : OUT STD_LOGIC_VECTOR (15 downto 0);
    const_size_out_1_ap_vld : OUT STD_LOGIC;
    layer5_out_ground_truth_V_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    layer5_out_ground_truth_V_ce0 : OUT STD_LOGIC;
    layer5_out_ground_truth_V_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    train : IN STD_LOGIC );
end;


architecture behav of myproject is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "myproject,hls_ip_2019_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xcu250-figd2104-2L-e,HLS_INPUT_CLOCK=5.000000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=3.880000,HLS_SYN_LAT=9,HLS_SYN_TPT=10,HLS_SYN_MEM=2,HLS_SYN_DSP=7,HLS_SYN_FF=400,HLS_SYN_LUT=1211,HLS_VERSION=2019_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (9 downto 0) := "0000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (9 downto 0) := "0000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (9 downto 0) := "0000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (9 downto 0) := "0000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (9 downto 0) := "0000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (9 downto 0) := "0001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (9 downto 0) := "0010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (9 downto 0) := "0100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (9 downto 0) := "1000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv16_0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv16_1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv16_7FFF : STD_LOGIC_VECTOR (15 downto 0) := "0111111111111111";
    constant ap_const_lv16_8000 : STD_LOGIC_VECTOR (15 downto 0) := "1000000000000000";
    constant ap_const_lv17_0 : STD_LOGIC_VECTOR (16 downto 0) := "00000000000000000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv5_1F : STD_LOGIC_VECTOR (4 downto 0) := "11111";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv6_3F : STD_LOGIC_VECTOR (5 downto 0) := "111111";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv15_0 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal fc1_input_V_preg : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000000";
    signal fc1_input_V_in_sig : STD_LOGIC_VECTOR (15 downto 0);
    signal fc1_input_V_ap_vld_preg : STD_LOGIC := '0';
    signal fc1_input_V_ap_vld_in_sig : STD_LOGIC;
    signal w2_V_address0 : STD_LOGIC_VECTOR (0 downto 0);
    signal w2_V_ce0 : STD_LOGIC;
    signal w2_V_we0 : STD_LOGIC;
    signal w2_V_d0 : STD_LOGIC_VECTOR (5 downto 0);
    signal w2_V_q0 : STD_LOGIC_VECTOR (5 downto 0);
    signal w2_V_address1 : STD_LOGIC_VECTOR (0 downto 0);
    signal w2_V_ce1 : STD_LOGIC;
    signal w2_V_we1 : STD_LOGIC;
    signal w2_V_d1 : STD_LOGIC_VECTOR (5 downto 0);
    signal w2_V_q1 : STD_LOGIC_VECTOR (5 downto 0);
    signal w4_V_address0 : STD_LOGIC_VECTOR (0 downto 0);
    signal w4_V_ce0 : STD_LOGIC;
    signal w4_V_we0 : STD_LOGIC;
    signal w4_V_d0 : STD_LOGIC_VECTOR (5 downto 0);
    signal w4_V_q0 : STD_LOGIC_VECTOR (5 downto 0);
    signal w4_V_address1 : STD_LOGIC_VECTOR (0 downto 0);
    signal w4_V_ce1 : STD_LOGIC;
    signal w4_V_we1 : STD_LOGIC;
    signal w4_V_d1 : STD_LOGIC_VECTOR (5 downto 0);
    signal w4_V_q1 : STD_LOGIC_VECTOR (5 downto 0);
    signal fc1_input_V_blk_n : STD_LOGIC;
    signal train_read_reg_1666 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state1 : BOOLEAN;
    signal fc1_input_V_read_reg_1670 : STD_LOGIC_VECTOR (15 downto 0);
    signal cache2_V_reg_1681 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal layer3_out_0_V_reg_1686 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal layer3_out_1_V_reg_1692 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_4_fu_369_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_4_reg_1698 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal w2_V_load_reg_1704 : STD_LOGIC_VECTOR (5 downto 0);
    signal w2_V_load_1_reg_1709 : STD_LOGIC_VECTOR (5 downto 0);
    signal layer5_out_grads_0_V_fu_452_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal select_ln340_7_fu_752_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal w4_V_load_reg_1724 : STD_LOGIC_VECTOR (5 downto 0);
    signal w4_V_load_1_reg_1729 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_Result_4_reg_1734 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal p_Val2_9_fu_797_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_9_reg_1740 : STD_LOGIC_VECTOR (15 downto 0);
    signal carry_1_fu_817_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal carry_1_reg_1746 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_6_fu_823_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_6_reg_1752 : STD_LOGIC_VECTOR (0 downto 0);
    signal Range1_all_ones_fu_855_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal Range1_all_ones_reg_1757 : STD_LOGIC_VECTOR (0 downto 0);
    signal Range1_all_zeros_fu_861_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal Range1_all_zeros_reg_1763 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln786_fu_894_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln786_reg_1768 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_18_reg_1774 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal add_ln415_fu_941_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln415_reg_1780 : STD_LOGIC_VECTOR (15 downto 0);
    signal and_ln416_fu_961_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln416_reg_1786 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_22_fu_967_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_22_reg_1792 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln879_1_fu_999_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln879_1_reg_1797 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln768_fu_1005_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln768_reg_1803 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln786_5_fu_1038_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln786_5_reg_1808 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_24_reg_1814 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln415_1_fu_1081_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal add_ln415_1_reg_1820 : STD_LOGIC_VECTOR (15 downto 0);
    signal and_ln416_1_fu_1101_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln416_1_reg_1826 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_28_fu_1107_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_28_reg_1832 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln879_3_fu_1139_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln879_3_reg_1837 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln768_1_fu_1145_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln768_1_reg_1843 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln786_7_fu_1178_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln786_7_reg_1848 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_1854 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal tmp_2_reg_1860 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_dense_latency_ap_fixed_ap_fixed_config4_0_0_fu_241_ap_start : STD_LOGIC;
    signal grp_dense_latency_ap_fixed_ap_fixed_config4_0_0_fu_241_ap_done : STD_LOGIC;
    signal grp_dense_latency_ap_fixed_ap_fixed_config4_0_0_fu_241_ap_idle : STD_LOGIC;
    signal grp_dense_latency_ap_fixed_ap_fixed_config4_0_0_fu_241_ap_ready : STD_LOGIC;
    signal grp_dense_latency_ap_fixed_ap_fixed_config4_0_0_fu_241_w4_V_address0 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_dense_latency_ap_fixed_ap_fixed_config4_0_0_fu_241_w4_V_ce0 : STD_LOGIC;
    signal grp_dense_latency_ap_fixed_ap_fixed_config4_0_0_fu_241_w4_V_address1 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_dense_latency_ap_fixed_ap_fixed_config4_0_0_fu_241_w4_V_ce1 : STD_LOGIC;
    signal grp_dense_latency_ap_fixed_ap_fixed_config4_0_0_fu_241_ap_return : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_dense_latency_ap_fixed_ap_fixed_config2_0_0_0_fu_249_ap_start : STD_LOGIC;
    signal grp_dense_latency_ap_fixed_ap_fixed_config2_0_0_0_fu_249_ap_done : STD_LOGIC;
    signal grp_dense_latency_ap_fixed_ap_fixed_config2_0_0_0_fu_249_ap_idle : STD_LOGIC;
    signal grp_dense_latency_ap_fixed_ap_fixed_config2_0_0_0_fu_249_ap_ready : STD_LOGIC;
    signal grp_dense_latency_ap_fixed_ap_fixed_config2_0_0_0_fu_249_ap_ce : STD_LOGIC;
    signal grp_dense_latency_ap_fixed_ap_fixed_config2_0_0_0_fu_249_w2_V_address0 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_dense_latency_ap_fixed_ap_fixed_config2_0_0_0_fu_249_w2_V_ce0 : STD_LOGIC;
    signal grp_dense_latency_ap_fixed_ap_fixed_config2_0_0_0_fu_249_w2_V_address1 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_dense_latency_ap_fixed_ap_fixed_config2_0_0_0_fu_249_w2_V_ce1 : STD_LOGIC;
    signal grp_dense_latency_ap_fixed_ap_fixed_config2_0_0_0_fu_249_ap_return_0 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_dense_latency_ap_fixed_ap_fixed_config2_0_0_0_fu_249_ap_return_1 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_block_state1_ignore_call15 : BOOLEAN;
    signal call_ret2_linear_ap_fixed_ap_fixed_16_6_0_0_0_linear_config3_s_fu_257_ap_ready : STD_LOGIC;
    signal call_ret2_linear_ap_fixed_ap_fixed_16_6_0_0_0_linear_config3_s_fu_257_ap_return_0 : STD_LOGIC_VECTOR (15 downto 0);
    signal call_ret2_linear_ap_fixed_ap_fixed_16_6_0_0_0_linear_config3_s_fu_257_ap_return_1 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_1_linear_ap_fixed_ap_fixed_16_6_0_0_0_linear_config5_s_fu_263_ap_ready : STD_LOGIC;
    signal p_Val2_1_linear_ap_fixed_ap_fixed_16_6_0_0_0_linear_config5_s_fu_263_ap_return : STD_LOGIC_VECTOR (15 downto 0);
    signal layer4_out_grads_0_V_reg_218 : STD_LOGIC_VECTOR (15 downto 0);
    signal storemerge_reg_229 : STD_LOGIC_VECTOR (15 downto 0);
    signal grp_dense_latency_ap_fixed_ap_fixed_config4_0_0_fu_241_ap_start_reg : STD_LOGIC := '0';
    signal ap_NS_fsm : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_NS_fsm_state3 : STD_LOGIC;
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal rhs_V_fu_293_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal lhs_V_fu_290_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal rhs_V_fu_293_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal ret_V_fu_297_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal p_Result_1_fu_315_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_s_fu_303_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln786_fu_323_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln340_1_fu_341_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln340_fu_335_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_3_fu_311_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal underflow_fu_329_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln340_fu_347_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln340_fu_353_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln388_fu_361_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal r_V_fu_377_p1 : STD_LOGIC_VECTOR (16 downto 0);
    signal r_V_4_fu_380_p2 : STD_LOGIC_VECTOR (16 downto 0);
    signal p_Result_3_fu_398_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_2_fu_386_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln786_1_fu_406_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln340_3_fu_424_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln340_2_fu_418_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Val2_6_fu_394_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal underflow_1_fu_412_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln340_1_fu_430_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln340_2_fu_436_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln388_1_fu_444_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal deleted_zeros_fu_460_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln785_fu_469_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln785_fu_475_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln785_1_fu_480_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln781_fu_465_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln786_fu_491_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln786_2_fu_496_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_2_fu_502_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal overflow_fu_485_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln340_3_fu_513_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln340_2_fu_507_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln340_4_fu_518_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln340_4_fu_524_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln388_2_fu_531_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln340_5_fu_538_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal trunc_ln708_3_fu_558_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal trunc_ln1118_fu_546_p1 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln415_1_fu_580_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_10_fu_568_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_11_fu_584_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_14_fu_590_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_8_fu_572_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln416_2_fu_598_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_17_fu_626_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln416_3_fu_640_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln416_1_fu_646_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln779_1_fu_634_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal carry_3_fu_604_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal Range2_all_ones_2_fu_618_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_9_fu_610_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln785_2_fu_664_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_7_fu_550_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln785_1_fu_670_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln785_3_fu_676_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln416_fu_652_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln786_2_fu_688_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln781_1_fu_658_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln786_3_fu_694_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln786_1_fu_700_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln786_3_fu_706_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal underflow_3_fu_712_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal overflow_1_fu_682_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln340_6_fu_724_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln340_5_fu_718_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln340_7_fu_730_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln340_6_fu_736_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln388_3_fu_744_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal r_V_5_fu_1613_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_fu_786_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln415_fu_793_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_8_fu_770_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_9_fu_803_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_5_fu_779_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln416_1_fu_811_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i_fu_831_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_2_i_fu_846_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_11_fu_867_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal Range2_all_ones_fu_840_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln779_fu_874_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln779_fu_880_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal deleted_ones_fu_886_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal mul_ln1118_2_fu_1626_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_20_fu_930_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln708_7_fu_914_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln415_2_fu_937_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_21_fu_947_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_19_fu_923_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln416_fu_955_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_3_i8_fu_975_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_Result_4_i9_fu_990_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_23_fu_1011_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln879_fu_984_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln779_2_fu_1018_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln779_1_fu_1024_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln416_fu_1030_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal mul_ln1118_3_fu_1639_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_26_fu_1070_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln708_9_fu_1054_p4 : STD_LOGIC_VECTOR (15 downto 0);
    signal zext_ln415_3_fu_1077_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal tmp_27_fu_1087_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_25_fu_1063_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln416_4_fu_1095_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_Result_3_1_i_fu_1115_p4 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_Result_4_1_i_fu_1130_p4 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_29_fu_1151_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln879_2_fu_1124_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln779_3_fu_1158_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln779_2_fu_1164_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln416_1_fu_1170_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln777_fu_1184_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln785_4_fu_1193_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln785_2_fu_1199_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln785_5_fu_1204_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln781_2_fu_1189_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln786_2_fu_1215_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln786_4_fu_1220_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln786_6_fu_1226_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln785_fu_1209_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln340_9_fu_1237_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln340_8_fu_1231_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln340_10_fu_1242_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln340_8_fu_1248_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln388_4_fu_1255_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal layer2_out_grads_0_V_fu_1262_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal shl_ln1118_1_fu_1270_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal shl_ln1118_2_fu_1282_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln1118_1_fu_1278_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal sext_ln1118_2_fu_1290_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal add_ln1118_1_fu_1294_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal shl_ln728_1_fu_1300_p3 : STD_LOGIC_VECTOR (20 downto 0);
    signal sext_ln1193_fu_1307_p1 : STD_LOGIC_VECTOR (20 downto 0);
    signal sub_ln1193_3_fu_1311_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal select_ln777_1_fu_1328_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln785_6_fu_1337_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln785_3_fu_1343_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln785_7_fu_1348_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln781_3_fu_1333_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln786_3_fu_1359_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln786_5_fu_1364_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln786_8_fu_1370_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln785_1_fu_1353_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln340_12_fu_1381_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln340_11_fu_1375_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln340_13_fu_1386_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln340_10_fu_1392_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal select_ln388_5_fu_1399_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal layer2_out_grads_1_V_fu_1406_p3 : STD_LOGIC_VECTOR (15 downto 0);
    signal shl_ln1118_3_fu_1414_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal shl_ln1118_7_fu_1426_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln1118_4_fu_1422_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal sext_ln1118_5_fu_1434_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal add_ln1118_3_fu_1438_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal shl_ln728_3_fu_1444_p3 : STD_LOGIC_VECTOR (20 downto 0);
    signal sext_ln1193_1_fu_1451_p1 : STD_LOGIC_VECTOR (20 downto 0);
    signal sub_ln1193_4_fu_1455_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal mul_ln1118_fu_1652_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1118_4_fu_1659_p2 : STD_LOGIC_VECTOR (25 downto 0);
    signal shl_ln_fu_1501_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal shl_ln1118_4_fu_1512_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln1118_9_fu_1519_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal sext_ln1118_8_fu_1508_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal add_ln1118_fu_1523_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal shl_ln1_fu_1529_p3 : STD_LOGIC_VECTOR (20 downto 0);
    signal sext_ln1193_2_fu_1536_p1 : STD_LOGIC_VECTOR (20 downto 0);
    signal sub_ln1193_fu_1540_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal shl_ln1118_5_fu_1557_p3 : STD_LOGIC_VECTOR (18 downto 0);
    signal shl_ln1118_6_fu_1568_p3 : STD_LOGIC_VECTOR (16 downto 0);
    signal sext_ln1118_12_fu_1575_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal sext_ln1118_11_fu_1564_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal add_ln1118_2_fu_1579_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal shl_ln728_2_fu_1585_p3 : STD_LOGIC_VECTOR (20 downto 0);
    signal sext_ln1193_3_fu_1592_p1 : STD_LOGIC_VECTOR (20 downto 0);
    signal sub_ln1193_2_fu_1596_p2 : STD_LOGIC_VECTOR (20 downto 0);
    signal r_V_5_fu_1613_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal r_V_2_fu_760_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal r_V_5_fu_1613_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln1118_2_fu_1626_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln1116_fu_900_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln1118_3_fu_1639_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mul_ln1118_fu_1652_p0 : STD_LOGIC_VECTOR (15 downto 0);
    signal sext_ln1118_7_fu_1476_p1 : STD_LOGIC_VECTOR (25 downto 0);
    signal mul_ln1118_4_fu_1659_p0 : STD_LOGIC_VECTOR (15 downto 0);

    component dense_latency_ap_fixed_ap_fixed_config4_0_0 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_ce : IN STD_LOGIC;
        data_0_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        data_1_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        w4_V_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
        w4_V_ce0 : OUT STD_LOGIC;
        w4_V_q0 : IN STD_LOGIC_VECTOR (5 downto 0);
        w4_V_address1 : OUT STD_LOGIC_VECTOR (0 downto 0);
        w4_V_ce1 : OUT STD_LOGIC;
        w4_V_q1 : IN STD_LOGIC_VECTOR (5 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component dense_latency_ap_fixed_ap_fixed_config2_0_0_0 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_ce : IN STD_LOGIC;
        data_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        w2_V_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
        w2_V_ce0 : OUT STD_LOGIC;
        w2_V_q0 : IN STD_LOGIC_VECTOR (5 downto 0);
        w2_V_address1 : OUT STD_LOGIC_VECTOR (0 downto 0);
        w2_V_ce1 : OUT STD_LOGIC;
        w2_V_q1 : IN STD_LOGIC_VECTOR (5 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component linear_ap_fixed_ap_fixed_16_6_0_0_0_linear_config3_s IS
    port (
        ap_ready : OUT STD_LOGIC;
        data_0_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        data_1_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (15 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component linear_ap_fixed_ap_fixed_16_6_0_0_0_linear_config5_s IS
    port (
        ap_ready : OUT STD_LOGIC;
        data_V_read : IN STD_LOGIC_VECTOR (15 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component myproject_mul_mul_16s_16s_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component myproject_mul_mul_16s_16s_26_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (15 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (25 downto 0) );
    end component;


    component myproject_w2_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (0 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (5 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        address1 : IN STD_LOGIC_VECTOR (0 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (5 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (5 downto 0) );
    end component;


    component myproject_w4_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (0 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (5 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (5 downto 0);
        address1 : IN STD_LOGIC_VECTOR (0 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (5 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (5 downto 0) );
    end component;



begin
    w2_V_U : component myproject_w2_V
    generic map (
        DataWidth => 6,
        AddressRange => 2,
        AddressWidth => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => w2_V_address0,
        ce0 => w2_V_ce0,
        we0 => w2_V_we0,
        d0 => w2_V_d0,
        q0 => w2_V_q0,
        address1 => w2_V_address1,
        ce1 => w2_V_ce1,
        we1 => w2_V_we1,
        d1 => w2_V_d1,
        q1 => w2_V_q1);

    w4_V_U : component myproject_w4_V
    generic map (
        DataWidth => 6,
        AddressRange => 2,
        AddressWidth => 1)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => w4_V_address0,
        ce0 => w4_V_ce0,
        we0 => w4_V_we0,
        d0 => w4_V_d0,
        q0 => w4_V_q0,
        address1 => w4_V_address1,
        ce1 => w4_V_ce1,
        we1 => w4_V_we1,
        d1 => w4_V_d1,
        q1 => w4_V_q1);

    grp_dense_latency_ap_fixed_ap_fixed_config4_0_0_fu_241 : component dense_latency_ap_fixed_ap_fixed_config4_0_0
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_dense_latency_ap_fixed_ap_fixed_config4_0_0_fu_241_ap_start,
        ap_done => grp_dense_latency_ap_fixed_ap_fixed_config4_0_0_fu_241_ap_done,
        ap_idle => grp_dense_latency_ap_fixed_ap_fixed_config4_0_0_fu_241_ap_idle,
        ap_ready => grp_dense_latency_ap_fixed_ap_fixed_config4_0_0_fu_241_ap_ready,
        ap_ce => ap_const_logic_1,
        data_0_V_read => call_ret2_linear_ap_fixed_ap_fixed_16_6_0_0_0_linear_config3_s_fu_257_ap_return_0,
        data_1_V_read => call_ret2_linear_ap_fixed_ap_fixed_16_6_0_0_0_linear_config3_s_fu_257_ap_return_1,
        w4_V_address0 => grp_dense_latency_ap_fixed_ap_fixed_config4_0_0_fu_241_w4_V_address0,
        w4_V_ce0 => grp_dense_latency_ap_fixed_ap_fixed_config4_0_0_fu_241_w4_V_ce0,
        w4_V_q0 => w4_V_q0,
        w4_V_address1 => grp_dense_latency_ap_fixed_ap_fixed_config4_0_0_fu_241_w4_V_address1,
        w4_V_ce1 => grp_dense_latency_ap_fixed_ap_fixed_config4_0_0_fu_241_w4_V_ce1,
        w4_V_q1 => w4_V_q1,
        ap_return => grp_dense_latency_ap_fixed_ap_fixed_config4_0_0_fu_241_ap_return);

    grp_dense_latency_ap_fixed_ap_fixed_config2_0_0_0_fu_249 : component dense_latency_ap_fixed_ap_fixed_config2_0_0_0
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_dense_latency_ap_fixed_ap_fixed_config2_0_0_0_fu_249_ap_start,
        ap_done => grp_dense_latency_ap_fixed_ap_fixed_config2_0_0_0_fu_249_ap_done,
        ap_idle => grp_dense_latency_ap_fixed_ap_fixed_config2_0_0_0_fu_249_ap_idle,
        ap_ready => grp_dense_latency_ap_fixed_ap_fixed_config2_0_0_0_fu_249_ap_ready,
        ap_ce => grp_dense_latency_ap_fixed_ap_fixed_config2_0_0_0_fu_249_ap_ce,
        data_V_read => fc1_input_V_in_sig,
        w2_V_address0 => grp_dense_latency_ap_fixed_ap_fixed_config2_0_0_0_fu_249_w2_V_address0,
        w2_V_ce0 => grp_dense_latency_ap_fixed_ap_fixed_config2_0_0_0_fu_249_w2_V_ce0,
        w2_V_q0 => w2_V_q0,
        w2_V_address1 => grp_dense_latency_ap_fixed_ap_fixed_config2_0_0_0_fu_249_w2_V_address1,
        w2_V_ce1 => grp_dense_latency_ap_fixed_ap_fixed_config2_0_0_0_fu_249_w2_V_ce1,
        w2_V_q1 => w2_V_q1,
        ap_return_0 => grp_dense_latency_ap_fixed_ap_fixed_config2_0_0_0_fu_249_ap_return_0,
        ap_return_1 => grp_dense_latency_ap_fixed_ap_fixed_config2_0_0_0_fu_249_ap_return_1);

    call_ret2_linear_ap_fixed_ap_fixed_16_6_0_0_0_linear_config3_s_fu_257 : component linear_ap_fixed_ap_fixed_16_6_0_0_0_linear_config3_s
    port map (
        ap_ready => call_ret2_linear_ap_fixed_ap_fixed_16_6_0_0_0_linear_config3_s_fu_257_ap_ready,
        data_0_V_read => grp_dense_latency_ap_fixed_ap_fixed_config2_0_0_0_fu_249_ap_return_0,
        data_1_V_read => grp_dense_latency_ap_fixed_ap_fixed_config2_0_0_0_fu_249_ap_return_1,
        ap_return_0 => call_ret2_linear_ap_fixed_ap_fixed_16_6_0_0_0_linear_config3_s_fu_257_ap_return_0,
        ap_return_1 => call_ret2_linear_ap_fixed_ap_fixed_16_6_0_0_0_linear_config3_s_fu_257_ap_return_1);

    p_Val2_1_linear_ap_fixed_ap_fixed_16_6_0_0_0_linear_config5_s_fu_263 : component linear_ap_fixed_ap_fixed_16_6_0_0_0_linear_config5_s
    port map (
        ap_ready => p_Val2_1_linear_ap_fixed_ap_fixed_16_6_0_0_0_linear_config5_s_fu_263_ap_ready,
        data_V_read => grp_dense_latency_ap_fixed_ap_fixed_config4_0_0_fu_241_ap_return,
        ap_return => p_Val2_1_linear_ap_fixed_ap_fixed_16_6_0_0_0_linear_config5_s_fu_263_ap_return);

    myproject_mul_mul_16s_16s_32_1_1_U9 : component myproject_mul_mul_16s_16s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        din0 => r_V_5_fu_1613_p0,
        din1 => r_V_5_fu_1613_p1,
        dout => r_V_5_fu_1613_p2);

    myproject_mul_mul_16s_16s_32_1_1_U10 : component myproject_mul_mul_16s_16s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        din0 => mul_ln1118_2_fu_1626_p0,
        din1 => layer3_out_0_V_reg_1686,
        dout => mul_ln1118_2_fu_1626_p2);

    myproject_mul_mul_16s_16s_32_1_1_U11 : component myproject_mul_mul_16s_16s_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 32)
    port map (
        din0 => mul_ln1118_3_fu_1639_p0,
        din1 => layer3_out_1_V_reg_1692,
        dout => mul_ln1118_3_fu_1639_p2);

    myproject_mul_mul_16s_16s_26_1_1_U12 : component myproject_mul_mul_16s_16s_26_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 26)
    port map (
        din0 => mul_ln1118_fu_1652_p0,
        din1 => layer2_out_grads_0_V_fu_1262_p3,
        dout => mul_ln1118_fu_1652_p2);

    myproject_mul_mul_16s_16s_26_1_1_U13 : component myproject_mul_mul_16s_16s_26_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 16,
        din1_WIDTH => 16,
        dout_WIDTH => 26)
    port map (
        din0 => mul_ln1118_4_fu_1659_p0,
        din1 => layer2_out_grads_1_V_fu_1406_p3,
        dout => mul_ln1118_4_fu_1659_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    fc1_input_V_ap_vld_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                fc1_input_V_ap_vld_preg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                    fc1_input_V_ap_vld_preg <= ap_const_logic_0;
                elsif ((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (fc1_input_V_ap_vld = ap_const_logic_1))) then 
                    fc1_input_V_ap_vld_preg <= fc1_input_V_ap_vld;
                end if; 
            end if;
        end if;
    end process;


    fc1_input_V_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                fc1_input_V_preg <= ap_const_lv16_0;
            else
                if ((not(((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) and (fc1_input_V_ap_vld = ap_const_logic_1))) then 
                    fc1_input_V_preg <= fc1_input_V;
                end if; 
            end if;
        end if;
    end process;


    grp_dense_latency_ap_fixed_ap_fixed_config4_0_0_fu_241_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_dense_latency_ap_fixed_ap_fixed_config4_0_0_fu_241_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_NS_fsm_state3) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    grp_dense_latency_ap_fixed_ap_fixed_config4_0_0_fu_241_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_dense_latency_ap_fixed_ap_fixed_config4_0_0_fu_241_ap_ready = ap_const_logic_1)) then 
                    grp_dense_latency_ap_fixed_ap_fixed_config4_0_0_fu_241_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    layer4_out_grads_0_V_reg_218_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                if ((train_read_reg_1666 = ap_const_lv1_0)) then 
                    layer4_out_grads_0_V_reg_218 <= ap_const_lv16_0;
                elsif ((train_read_reg_1666 = ap_const_lv1_1)) then 
                    layer4_out_grads_0_V_reg_218 <= layer5_out_grads_0_V_fu_452_p3;
                end if;
            end if; 
        end if;
    end process;

    storemerge_reg_229_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                if ((train_read_reg_1666 = ap_const_lv1_0)) then 
                    storemerge_reg_229 <= ap_const_lv16_0;
                elsif ((train_read_reg_1666 = ap_const_lv1_1)) then 
                    storemerge_reg_229 <= select_ln340_7_fu_752_p3;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((train_read_reg_1666 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state7))) then
                Range1_all_ones_reg_1757 <= Range1_all_ones_fu_855_p2;
                Range1_all_zeros_reg_1763 <= Range1_all_zeros_fu_861_p2;
                and_ln786_reg_1768 <= and_ln786_fu_894_p2;
                carry_1_reg_1746 <= carry_1_fu_817_p2;
                p_Result_4_reg_1734 <= r_V_5_fu_1613_p2(31 downto 31);
                p_Result_6_reg_1752 <= p_Val2_9_fu_797_p2(15 downto 15);
                p_Val2_9_reg_1740 <= p_Val2_9_fu_797_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                add_ln415_1_reg_1820 <= add_ln415_1_fu_1081_p2;
                add_ln415_reg_1780 <= add_ln415_fu_941_p2;
                and_ln416_1_reg_1826 <= and_ln416_1_fu_1101_p2;
                and_ln416_reg_1786 <= and_ln416_fu_961_p2;
                and_ln786_5_reg_1808 <= and_ln786_5_fu_1038_p2;
                and_ln786_7_reg_1848 <= and_ln786_7_fu_1178_p2;
                icmp_ln768_1_reg_1843 <= icmp_ln768_1_fu_1145_p2;
                icmp_ln768_reg_1803 <= icmp_ln768_fu_1005_p2;
                icmp_ln879_1_reg_1797 <= icmp_ln879_1_fu_999_p2;
                icmp_ln879_3_reg_1837 <= icmp_ln879_3_fu_1139_p2;
                tmp_18_reg_1774 <= mul_ln1118_2_fu_1626_p2(31 downto 31);
                tmp_22_reg_1792 <= add_ln415_fu_941_p2(15 downto 15);
                tmp_24_reg_1814 <= mul_ln1118_3_fu_1639_p2(31 downto 31);
                tmp_28_reg_1832 <= add_ln415_1_fu_1081_p2(15 downto 15);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((train_read_reg_1666 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                cache2_V_reg_1681 <= layer5_out_ground_truth_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((not(((fc1_input_V_ap_vld_in_sig = ap_const_logic_0) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                fc1_input_V_read_reg_1670 <= fc1_input_V_in_sig;
                train_read_reg_1666 <= (0=>train, others=>'-');
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                layer3_out_0_V_reg_1686 <= call_ret2_linear_ap_fixed_ap_fixed_16_6_0_0_0_linear_config3_s_fu_257_ap_return_0;
                layer3_out_1_V_reg_1692 <= call_ret2_linear_ap_fixed_ap_fixed_16_6_0_0_0_linear_config3_s_fu_257_ap_return_1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((train_read_reg_1666 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                p_Val2_4_reg_1698 <= p_Val2_4_fu_369_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                tmp_2_reg_1860 <= mul_ln1118_4_fu_1659_p2(25 downto 10);
                tmp_reg_1854 <= mul_ln1118_fu_1652_p2(25 downto 10);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                w2_V_load_1_reg_1709 <= w2_V_q1;
                w2_V_load_reg_1704 <= w2_V_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                w4_V_load_1_reg_1729 <= w4_V_q1;
                w4_V_load_reg_1724 <= w4_V_q0;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, fc1_input_V_ap_vld_in_sig)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if ((not(((fc1_input_V_ap_vld_in_sig = ap_const_logic_0) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXX";
        end case;
    end process;
    Range1_all_ones_fu_855_p2 <= "1" when (tmp_2_i_fu_846_p4 = ap_const_lv6_3F) else "0";
    Range1_all_zeros_fu_861_p2 <= "1" when (tmp_2_i_fu_846_p4 = ap_const_lv6_0) else "0";
    Range2_all_ones_2_fu_618_p3 <= select_ln340_5_fu_538_p3(15 downto 15);
    Range2_all_ones_fu_840_p2 <= "1" when (tmp_i_fu_831_p4 = ap_const_lv5_1F) else "0";
    add_ln1118_1_fu_1294_p2 <= std_logic_vector(signed(sext_ln1118_1_fu_1278_p1) + signed(sext_ln1118_2_fu_1290_p1));
    add_ln1118_2_fu_1579_p2 <= std_logic_vector(signed(sext_ln1118_12_fu_1575_p1) + signed(sext_ln1118_11_fu_1564_p1));
    add_ln1118_3_fu_1438_p2 <= std_logic_vector(signed(sext_ln1118_4_fu_1422_p1) + signed(sext_ln1118_5_fu_1434_p1));
    add_ln1118_fu_1523_p2 <= std_logic_vector(signed(sext_ln1118_9_fu_1519_p1) + signed(sext_ln1118_8_fu_1508_p1));
    add_ln415_1_fu_1081_p2 <= std_logic_vector(unsigned(trunc_ln708_9_fu_1054_p4) + unsigned(zext_ln415_3_fu_1077_p1));
    add_ln415_fu_941_p2 <= std_logic_vector(unsigned(trunc_ln708_7_fu_914_p4) + unsigned(zext_ln415_2_fu_937_p1));
    and_ln416_1_fu_1101_p2 <= (xor_ln416_4_fu_1095_p2 and tmp_25_fu_1063_p3);
    and_ln416_fu_961_p2 <= (xor_ln416_fu_955_p2 and tmp_19_fu_923_p3);
    and_ln779_1_fu_1024_p2 <= (xor_ln779_2_fu_1018_p2 and icmp_ln879_fu_984_p2);
    and_ln779_2_fu_1164_p2 <= (xor_ln779_3_fu_1158_p2 and icmp_ln879_2_fu_1124_p2);
    and_ln779_fu_880_p2 <= (xor_ln779_fu_874_p2 and Range2_all_ones_fu_840_p2);
    and_ln781_1_fu_658_p2 <= (carry_3_fu_604_p2 and Range2_all_ones_2_fu_618_p3);
    and_ln781_2_fu_1189_p2 <= (icmp_ln879_1_reg_1797 and and_ln416_reg_1786);
    and_ln781_3_fu_1333_p2 <= (icmp_ln879_3_reg_1837 and and_ln416_1_reg_1826);
    and_ln781_fu_465_p2 <= (carry_1_reg_1746 and Range1_all_ones_reg_1757);
    and_ln785_1_fu_1353_p2 <= (xor_ln785_7_fu_1348_p2 and or_ln785_3_fu_1343_p2);
    and_ln785_fu_1209_p2 <= (xor_ln785_5_fu_1204_p2 and or_ln785_2_fu_1199_p2);
    and_ln786_2_fu_688_p2 <= (p_Result_9_fu_610_p3 and or_ln416_fu_652_p2);
    and_ln786_3_fu_694_p2 <= (and_ln786_2_fu_688_p2 and Range2_all_ones_2_fu_618_p3);
    and_ln786_5_fu_1038_p2 <= (tmp_22_fu_967_p3 and select_ln416_fu_1030_p3);
    and_ln786_6_fu_1226_p2 <= (xor_ln786_4_fu_1220_p2 and tmp_18_reg_1774);
    and_ln786_7_fu_1178_p2 <= (tmp_28_fu_1107_p3 and select_ln416_1_fu_1170_p3);
    and_ln786_8_fu_1370_p2 <= (xor_ln786_5_fu_1364_p2 and tmp_24_reg_1814);
    and_ln786_fu_894_p2 <= (p_Result_6_fu_823_p3 and deleted_ones_fu_886_p3);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
    ap_NS_fsm_state3 <= ap_NS_fsm(2);

    ap_block_state1_assign_proc : process(ap_start, fc1_input_V_ap_vld_in_sig)
    begin
                ap_block_state1 <= ((fc1_input_V_ap_vld_in_sig = ap_const_logic_0) or (ap_start = ap_const_logic_0));
    end process;


    ap_block_state1_ignore_call15_assign_proc : process(ap_start, fc1_input_V_ap_vld_in_sig)
    begin
                ap_block_state1_ignore_call15 <= ((fc1_input_V_ap_vld_in_sig = ap_const_logic_0) or (ap_start = ap_const_logic_0));
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    carry_1_fu_817_p2 <= (xor_ln416_1_fu_811_p2 and p_Result_5_fu_779_p3);
    carry_3_fu_604_p2 <= (xor_ln416_2_fu_598_p2 and p_Result_8_fu_572_p3);
    const_size_in_1 <= ap_const_lv16_1;

    const_size_in_1_ap_vld_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            const_size_in_1_ap_vld <= ap_const_logic_1;
        else 
            const_size_in_1_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    const_size_out_1 <= ap_const_lv16_1;

    const_size_out_1_ap_vld_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            const_size_out_1_ap_vld <= ap_const_logic_1;
        else 
            const_size_out_1_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    deleted_ones_fu_886_p3 <= 
        and_ln779_fu_880_p2 when (carry_1_fu_817_p2(0) = '1') else 
        Range1_all_ones_fu_855_p2;
    deleted_zeros_fu_460_p3 <= 
        Range1_all_ones_reg_1757 when (carry_1_reg_1746(0) = '1') else 
        Range1_all_zeros_reg_1763;

    fc1_input_V_ap_vld_in_sig_assign_proc : process(fc1_input_V_ap_vld, fc1_input_V_ap_vld_preg)
    begin
        if ((fc1_input_V_ap_vld = ap_const_logic_1)) then 
            fc1_input_V_ap_vld_in_sig <= fc1_input_V_ap_vld;
        else 
            fc1_input_V_ap_vld_in_sig <= fc1_input_V_ap_vld_preg;
        end if; 
    end process;


    fc1_input_V_blk_n_assign_proc : process(ap_start, ap_CS_fsm_state1, fc1_input_V_ap_vld)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
            fc1_input_V_blk_n <= fc1_input_V_ap_vld;
        else 
            fc1_input_V_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    fc1_input_V_in_sig_assign_proc : process(fc1_input_V, fc1_input_V_preg, fc1_input_V_ap_vld)
    begin
        if ((fc1_input_V_ap_vld = ap_const_logic_1)) then 
            fc1_input_V_in_sig <= fc1_input_V;
        else 
            fc1_input_V_in_sig <= fc1_input_V_preg;
        end if; 
    end process;


    grp_dense_latency_ap_fixed_ap_fixed_config2_0_0_0_fu_249_ap_ce_assign_proc : process(ap_start, ap_CS_fsm_state1, fc1_input_V_ap_vld_in_sig, ap_CS_fsm_state2, ap_CS_fsm_state3)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or (not(((fc1_input_V_ap_vld_in_sig = ap_const_logic_0) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            grp_dense_latency_ap_fixed_ap_fixed_config2_0_0_0_fu_249_ap_ce <= ap_const_logic_1;
        else 
            grp_dense_latency_ap_fixed_ap_fixed_config2_0_0_0_fu_249_ap_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_dense_latency_ap_fixed_ap_fixed_config2_0_0_0_fu_249_ap_start_assign_proc : process(ap_start, ap_CS_fsm_state1, fc1_input_V_ap_vld_in_sig)
    begin
        if ((not(((fc1_input_V_ap_vld_in_sig = ap_const_logic_0) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
            grp_dense_latency_ap_fixed_ap_fixed_config2_0_0_0_fu_249_ap_start <= ap_const_logic_1;
        else 
            grp_dense_latency_ap_fixed_ap_fixed_config2_0_0_0_fu_249_ap_start <= ap_const_logic_0;
        end if; 
    end process;

    grp_dense_latency_ap_fixed_ap_fixed_config4_0_0_fu_241_ap_start <= grp_dense_latency_ap_fixed_ap_fixed_config4_0_0_fu_241_ap_start_reg;
    icmp_ln768_1_fu_1145_p2 <= "1" when (p_Result_4_1_i_fu_1130_p4 = ap_const_lv6_0) else "0";
    icmp_ln768_fu_1005_p2 <= "1" when (p_Result_4_i9_fu_990_p4 = ap_const_lv6_0) else "0";
    icmp_ln879_1_fu_999_p2 <= "1" when (p_Result_4_i9_fu_990_p4 = ap_const_lv6_3F) else "0";
    icmp_ln879_2_fu_1124_p2 <= "1" when (p_Result_3_1_i_fu_1115_p4 = ap_const_lv5_1F) else "0";
    icmp_ln879_3_fu_1139_p2 <= "1" when (p_Result_4_1_i_fu_1130_p4 = ap_const_lv6_3F) else "0";
    icmp_ln879_fu_984_p2 <= "1" when (p_Result_3_i8_fu_975_p4 = ap_const_lv5_1F) else "0";
    layer2_out_grads_0_V_fu_1262_p3 <= 
        select_ln340_8_fu_1248_p3 when (or_ln340_10_fu_1242_p2(0) = '1') else 
        select_ln388_4_fu_1255_p3;
    layer2_out_grads_1_V_fu_1406_p3 <= 
        select_ln340_10_fu_1392_p3 when (or_ln340_13_fu_1386_p2(0) = '1') else 
        select_ln388_5_fu_1399_p3;
    layer5_out_0_V <= p_Val2_1_linear_ap_fixed_ap_fixed_16_6_0_0_0_linear_config5_s_fu_263_ap_return;

    layer5_out_0_V_ap_vld_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            layer5_out_0_V_ap_vld <= ap_const_logic_1;
        else 
            layer5_out_0_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    layer5_out_grads_0_V_fu_452_p3 <= 
        select_ln340_2_fu_436_p3 when (or_ln340_1_fu_430_p2(0) = '1') else 
        select_ln388_1_fu_444_p3;
    layer5_out_ground_truth_V_address0 <= ap_const_lv64_0(1 - 1 downto 0);

    layer5_out_ground_truth_V_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, fc1_input_V_ap_vld_in_sig)
    begin
        if ((not(((fc1_input_V_ap_vld_in_sig = ap_const_logic_0) or (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            layer5_out_ground_truth_V_ce0 <= ap_const_logic_1;
        else 
            layer5_out_ground_truth_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

        lhs_V_fu_290_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(cache2_V_reg_1681),17));

    loss_layer5_out_V <= storemerge_reg_229;

    loss_layer5_out_V_ap_vld_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            loss_layer5_out_V_ap_vld <= ap_const_logic_1;
        else 
            loss_layer5_out_V_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    mul_ln1118_2_fu_1626_p0 <= sext_ln1116_fu_900_p1(16 - 1 downto 0);
    mul_ln1118_3_fu_1639_p0 <= sext_ln1116_fu_900_p1(16 - 1 downto 0);
    mul_ln1118_4_fu_1659_p0 <= sext_ln1118_7_fu_1476_p1(16 - 1 downto 0);
    mul_ln1118_fu_1652_p0 <= sext_ln1118_7_fu_1476_p1(16 - 1 downto 0);
    or_ln340_10_fu_1242_p2 <= (or_ln340_9_fu_1237_p2 or and_ln781_2_fu_1189_p2);
    or_ln340_11_fu_1375_p2 <= (and_ln786_8_fu_1370_p2 or and_ln785_1_fu_1353_p2);
    or_ln340_12_fu_1381_p2 <= (xor_ln785_7_fu_1348_p2 or and_ln786_7_reg_1848);
    or_ln340_13_fu_1386_p2 <= (or_ln340_12_fu_1381_p2 or and_ln781_3_fu_1333_p2);
    or_ln340_1_fu_430_p2 <= (xor_ln340_3_fu_424_p2 or p_Result_3_fu_398_p3);
    or_ln340_2_fu_507_p2 <= (underflow_2_fu_502_p2 or overflow_fu_485_p2);
    or_ln340_3_fu_513_p2 <= (xor_ln785_1_fu_480_p2 or and_ln786_reg_1768);
    or_ln340_4_fu_518_p2 <= (or_ln340_3_fu_513_p2 or and_ln781_fu_465_p2);
    or_ln340_5_fu_718_p2 <= (underflow_3_fu_712_p2 or overflow_1_fu_682_p2);
    or_ln340_6_fu_724_p2 <= (xor_ln785_3_fu_676_p2 or and_ln786_3_fu_694_p2);
    or_ln340_7_fu_730_p2 <= (or_ln340_6_fu_724_p2 or and_ln781_1_fu_658_p2);
    or_ln340_8_fu_1231_p2 <= (and_ln786_6_fu_1226_p2 or and_ln785_fu_1209_p2);
    or_ln340_9_fu_1237_p2 <= (xor_ln785_5_fu_1204_p2 or and_ln786_5_reg_1808);
    or_ln340_fu_347_p2 <= (xor_ln340_1_fu_341_p2 or p_Result_1_fu_315_p3);
    or_ln416_1_fu_646_p2 <= (xor_ln416_3_fu_640_p2 or tmp_14_fu_590_p3);
    or_ln416_fu_652_p2 <= (xor_ln779_1_fu_634_p2 or or_ln416_1_fu_646_p2);
    or_ln785_1_fu_670_p2 <= (xor_ln785_2_fu_664_p2 or p_Result_9_fu_610_p3);
    or_ln785_2_fu_1199_p2 <= (xor_ln785_4_fu_1193_p2 or tmp_22_reg_1792);
    or_ln785_3_fu_1343_p2 <= (xor_ln785_6_fu_1337_p2 or tmp_28_reg_1832);
    or_ln785_fu_475_p2 <= (xor_ln785_fu_469_p2 or p_Result_6_reg_1752);
    or_ln786_1_fu_700_p2 <= (and_ln786_3_fu_694_p2 or and_ln781_1_fu_658_p2);
    or_ln786_2_fu_1215_p2 <= (and_ln786_5_reg_1808 or and_ln781_2_fu_1189_p2);
    or_ln786_3_fu_1359_p2 <= (and_ln786_7_reg_1848 or and_ln781_3_fu_1333_p2);
    or_ln786_fu_491_p2 <= (and_ln786_reg_1768 or and_ln781_fu_465_p2);
    overflow_1_fu_682_p2 <= (xor_ln785_3_fu_676_p2 and or_ln785_1_fu_670_p2);
    overflow_fu_485_p2 <= (xor_ln785_1_fu_480_p2 and or_ln785_fu_475_p2);
    p_Result_1_fu_315_p3 <= ret_V_fu_297_p2(15 downto 15);
    p_Result_2_fu_386_p3 <= r_V_4_fu_380_p2(16 downto 16);
    p_Result_3_1_i_fu_1115_p4 <= mul_ln1118_3_fu_1639_p2(31 downto 27);
    p_Result_3_fu_398_p3 <= r_V_4_fu_380_p2(15 downto 15);
    p_Result_3_i8_fu_975_p4 <= mul_ln1118_2_fu_1626_p2(31 downto 27);
    p_Result_4_1_i_fu_1130_p4 <= mul_ln1118_3_fu_1639_p2(31 downto 26);
    p_Result_4_i9_fu_990_p4 <= mul_ln1118_2_fu_1626_p2(31 downto 26);
    p_Result_5_fu_779_p3 <= r_V_5_fu_1613_p2(25 downto 25);
    p_Result_6_fu_823_p3 <= p_Val2_9_fu_797_p2(15 downto 15);
    p_Result_7_fu_550_p3 <= select_ln340_5_fu_538_p3(15 downto 15);
    p_Result_8_fu_572_p3 <= select_ln340_5_fu_538_p3(15 downto 15);
    p_Result_9_fu_610_p3 <= p_Val2_11_fu_584_p2(15 downto 15);
    p_Result_s_fu_303_p3 <= ret_V_fu_297_p2(16 downto 16);
        p_Val2_10_fu_568_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln708_3_fu_558_p4),16));

    p_Val2_11_fu_584_p2 <= std_logic_vector(unsigned(zext_ln415_1_fu_580_p1) + unsigned(p_Val2_10_fu_568_p1));
    p_Val2_3_fu_311_p1 <= ret_V_fu_297_p2(16 - 1 downto 0);
    p_Val2_4_fu_369_p3 <= 
        select_ln340_fu_353_p3 when (or_ln340_fu_347_p2(0) = '1') else 
        select_ln388_fu_361_p3;
    p_Val2_6_fu_394_p1 <= r_V_4_fu_380_p2(16 - 1 downto 0);
    p_Val2_8_fu_770_p4 <= r_V_5_fu_1613_p2(25 downto 10);
    p_Val2_9_fu_797_p2 <= std_logic_vector(unsigned(zext_ln415_fu_793_p1) + unsigned(p_Val2_8_fu_770_p4));
        r_V_2_fu_760_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_4_reg_1698),32));

    r_V_4_fu_380_p2 <= std_logic_vector(unsigned(ap_const_lv17_0) - unsigned(r_V_fu_377_p1));
    r_V_5_fu_1613_p0 <= r_V_2_fu_760_p1(16 - 1 downto 0);
    r_V_5_fu_1613_p1 <= r_V_2_fu_760_p1(16 - 1 downto 0);
        r_V_fu_377_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_Val2_4_reg_1698),17));

    ret_V_fu_297_p2 <= std_logic_vector(signed(lhs_V_fu_290_p1) - signed(rhs_V_fu_293_p1));
    rhs_V_fu_293_p0 <= p_Val2_1_linear_ap_fixed_ap_fixed_16_6_0_0_0_linear_config5_s_fu_263_ap_return;
        rhs_V_fu_293_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(rhs_V_fu_293_p0),17));

    select_ln340_10_fu_1392_p3 <= 
        ap_const_lv16_7FFF when (or_ln340_11_fu_1375_p2(0) = '1') else 
        add_ln415_1_reg_1820;
    select_ln340_2_fu_436_p3 <= 
        ap_const_lv16_7FFF when (xor_ln340_2_fu_418_p2(0) = '1') else 
        p_Val2_6_fu_394_p1;
    select_ln340_4_fu_524_p3 <= 
        ap_const_lv16_7FFF when (or_ln340_2_fu_507_p2(0) = '1') else 
        p_Val2_9_reg_1740;
    select_ln340_5_fu_538_p3 <= 
        select_ln340_4_fu_524_p3 when (or_ln340_4_fu_518_p2(0) = '1') else 
        select_ln388_2_fu_531_p3;
    select_ln340_6_fu_736_p3 <= 
        ap_const_lv16_7FFF when (or_ln340_5_fu_718_p2(0) = '1') else 
        p_Val2_11_fu_584_p2;
    select_ln340_7_fu_752_p3 <= 
        select_ln340_6_fu_736_p3 when (or_ln340_7_fu_730_p2(0) = '1') else 
        select_ln388_3_fu_744_p3;
    select_ln340_8_fu_1248_p3 <= 
        ap_const_lv16_7FFF when (or_ln340_8_fu_1231_p2(0) = '1') else 
        add_ln415_reg_1780;
    select_ln340_fu_353_p3 <= 
        ap_const_lv16_7FFF when (xor_ln340_fu_335_p2(0) = '1') else 
        p_Val2_3_fu_311_p1;
    select_ln388_1_fu_444_p3 <= 
        ap_const_lv16_8000 when (underflow_1_fu_412_p2(0) = '1') else 
        p_Val2_6_fu_394_p1;
    select_ln388_2_fu_531_p3 <= 
        ap_const_lv16_8000 when (underflow_2_fu_502_p2(0) = '1') else 
        p_Val2_9_reg_1740;
    select_ln388_3_fu_744_p3 <= 
        ap_const_lv16_8000 when (underflow_3_fu_712_p2(0) = '1') else 
        p_Val2_11_fu_584_p2;
    select_ln388_4_fu_1255_p3 <= 
        ap_const_lv16_8000 when (and_ln786_6_fu_1226_p2(0) = '1') else 
        add_ln415_reg_1780;
    select_ln388_5_fu_1399_p3 <= 
        ap_const_lv16_8000 when (and_ln786_8_fu_1370_p2(0) = '1') else 
        add_ln415_1_reg_1820;
    select_ln388_fu_361_p3 <= 
        ap_const_lv16_8000 when (underflow_fu_329_p2(0) = '1') else 
        p_Val2_3_fu_311_p1;
    select_ln416_1_fu_1170_p3 <= 
        and_ln779_2_fu_1164_p2 when (and_ln416_1_fu_1101_p2(0) = '1') else 
        icmp_ln879_3_fu_1139_p2;
    select_ln416_fu_1030_p3 <= 
        and_ln779_1_fu_1024_p2 when (and_ln416_fu_961_p2(0) = '1') else 
        icmp_ln879_1_fu_999_p2;
    select_ln777_1_fu_1328_p3 <= 
        icmp_ln879_3_reg_1837 when (and_ln416_1_reg_1826(0) = '1') else 
        icmp_ln768_1_reg_1843;
    select_ln777_fu_1184_p3 <= 
        icmp_ln879_1_reg_1797 when (and_ln416_reg_1786(0) = '1') else 
        icmp_ln768_reg_1803;
        sext_ln1116_fu_900_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(layer4_out_grads_0_V_reg_218),32));

        sext_ln1118_11_fu_1564_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln1118_5_fu_1557_p3),20));

        sext_ln1118_12_fu_1575_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln1118_6_fu_1568_p3),20));

        sext_ln1118_1_fu_1278_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln1118_1_fu_1270_p3),20));

        sext_ln1118_2_fu_1290_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln1118_2_fu_1282_p3),20));

        sext_ln1118_4_fu_1422_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln1118_3_fu_1414_p3),20));

        sext_ln1118_5_fu_1434_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln1118_7_fu_1426_p3),20));

        sext_ln1118_7_fu_1476_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(fc1_input_V_read_reg_1670),26));

        sext_ln1118_8_fu_1508_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln_fu_1501_p3),20));

        sext_ln1118_9_fu_1519_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(shl_ln1118_4_fu_1512_p3),20));

        sext_ln1193_1_fu_1451_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln1118_3_fu_1438_p2),21));

        sext_ln1193_2_fu_1536_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln1118_fu_1523_p2),21));

        sext_ln1193_3_fu_1592_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln1118_2_fu_1579_p2),21));

        sext_ln1193_fu_1307_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(add_ln1118_1_fu_1294_p2),21));

    shl_ln1118_1_fu_1270_p3 <= (layer2_out_grads_0_V_fu_1262_p3 & ap_const_lv3_0);
    shl_ln1118_2_fu_1282_p3 <= (layer2_out_grads_0_V_fu_1262_p3 & ap_const_lv1_0);
    shl_ln1118_3_fu_1414_p3 <= (layer2_out_grads_1_V_fu_1406_p3 & ap_const_lv3_0);
    shl_ln1118_4_fu_1512_p3 <= (tmp_reg_1854 & ap_const_lv1_0);
    shl_ln1118_5_fu_1557_p3 <= (tmp_2_reg_1860 & ap_const_lv3_0);
    shl_ln1118_6_fu_1568_p3 <= (tmp_2_reg_1860 & ap_const_lv1_0);
    shl_ln1118_7_fu_1426_p3 <= (layer2_out_grads_1_V_fu_1406_p3 & ap_const_lv1_0);
    shl_ln1_fu_1529_p3 <= (w2_V_load_reg_1704 & ap_const_lv15_0);
    shl_ln728_1_fu_1300_p3 <= (w4_V_load_reg_1724 & ap_const_lv15_0);
    shl_ln728_2_fu_1585_p3 <= (w2_V_load_1_reg_1709 & ap_const_lv15_0);
    shl_ln728_3_fu_1444_p3 <= (w4_V_load_1_reg_1729 & ap_const_lv15_0);
    shl_ln_fu_1501_p3 <= (tmp_reg_1854 & ap_const_lv3_0);
    sub_ln1193_2_fu_1596_p2 <= std_logic_vector(unsigned(shl_ln728_2_fu_1585_p3) - unsigned(sext_ln1193_3_fu_1592_p1));
    sub_ln1193_3_fu_1311_p2 <= std_logic_vector(unsigned(shl_ln728_1_fu_1300_p3) - unsigned(sext_ln1193_fu_1307_p1));
    sub_ln1193_4_fu_1455_p2 <= std_logic_vector(unsigned(shl_ln728_3_fu_1444_p3) - unsigned(sext_ln1193_1_fu_1451_p1));
    sub_ln1193_fu_1540_p2 <= std_logic_vector(unsigned(shl_ln1_fu_1529_p3) - unsigned(sext_ln1193_2_fu_1536_p1));
    tmp_11_fu_867_p3 <= r_V_5_fu_1613_p2(26 downto 26);
    tmp_14_fu_590_p3 <= p_Val2_11_fu_584_p2(15 downto 15);
    tmp_17_fu_626_p3 <= select_ln340_5_fu_538_p3(15 downto 15);
    tmp_19_fu_923_p3 <= mul_ln1118_2_fu_1626_p2(25 downto 25);
    tmp_20_fu_930_p3 <= mul_ln1118_2_fu_1626_p2(9 downto 9);
    tmp_21_fu_947_p3 <= add_ln415_fu_941_p2(15 downto 15);
    tmp_22_fu_967_p3 <= add_ln415_fu_941_p2(15 downto 15);
    tmp_23_fu_1011_p3 <= mul_ln1118_2_fu_1626_p2(26 downto 26);
    tmp_25_fu_1063_p3 <= mul_ln1118_3_fu_1639_p2(25 downto 25);
    tmp_26_fu_1070_p3 <= mul_ln1118_3_fu_1639_p2(9 downto 9);
    tmp_27_fu_1087_p3 <= add_ln415_1_fu_1081_p2(15 downto 15);
    tmp_28_fu_1107_p3 <= add_ln415_1_fu_1081_p2(15 downto 15);
    tmp_29_fu_1151_p3 <= mul_ln1118_3_fu_1639_p2(26 downto 26);
    tmp_2_i_fu_846_p4 <= r_V_5_fu_1613_p2(31 downto 26);
    tmp_8_fu_786_p3 <= r_V_5_fu_1613_p2(9 downto 9);
    tmp_9_fu_803_p3 <= p_Val2_9_fu_797_p2(15 downto 15);
    tmp_i_fu_831_p4 <= r_V_5_fu_1613_p2(31 downto 27);
    trunc_ln1118_fu_546_p1 <= select_ln340_5_fu_538_p3(1 - 1 downto 0);
    trunc_ln708_3_fu_558_p4 <= select_ln340_5_fu_538_p3(15 downto 1);
    trunc_ln708_7_fu_914_p4 <= mul_ln1118_2_fu_1626_p2(25 downto 10);
    trunc_ln708_9_fu_1054_p4 <= mul_ln1118_3_fu_1639_p2(25 downto 10);
    underflow_1_fu_412_p2 <= (xor_ln786_1_fu_406_p2 and p_Result_2_fu_386_p3);
    underflow_2_fu_502_p2 <= (xor_ln786_2_fu_496_p2 and p_Result_4_reg_1734);
    underflow_3_fu_712_p2 <= (xor_ln786_3_fu_706_p2 and p_Result_7_fu_550_p3);
    underflow_fu_329_p2 <= (xor_ln786_fu_323_p2 and p_Result_s_fu_303_p3);

    w2_V_address0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, grp_dense_latency_ap_fixed_ap_fixed_config2_0_0_0_fu_249_w2_V_address0, ap_CS_fsm_state4, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            w2_V_address0 <= ap_const_lv1_0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state1) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            w2_V_address0 <= grp_dense_latency_ap_fixed_ap_fixed_config2_0_0_0_fu_249_w2_V_address0;
        else 
            w2_V_address0 <= "X";
        end if; 
    end process;


    w2_V_address1_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, grp_dense_latency_ap_fixed_ap_fixed_config2_0_0_0_fu_249_w2_V_address1, ap_CS_fsm_state4, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            w2_V_address1 <= ap_const_lv1_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state1) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            w2_V_address1 <= grp_dense_latency_ap_fixed_ap_fixed_config2_0_0_0_fu_249_w2_V_address1;
        else 
            w2_V_address1 <= "X";
        end if; 
    end process;


    w2_V_ce0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, grp_dense_latency_ap_fixed_ap_fixed_config2_0_0_0_fu_249_w2_V_ce0, ap_CS_fsm_state4, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            w2_V_ce0 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state1) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            w2_V_ce0 <= grp_dense_latency_ap_fixed_ap_fixed_config2_0_0_0_fu_249_w2_V_ce0;
        else 
            w2_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    w2_V_ce1_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state2, grp_dense_latency_ap_fixed_ap_fixed_config2_0_0_0_fu_249_w2_V_ce1, ap_CS_fsm_state4, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            w2_V_ce1 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state1) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            w2_V_ce1 <= grp_dense_latency_ap_fixed_ap_fixed_config2_0_0_0_fu_249_w2_V_ce1;
        else 
            w2_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    w2_V_d0 <= sub_ln1193_fu_1540_p2(20 downto 15);
    w2_V_d1 <= sub_ln1193_2_fu_1596_p2(20 downto 15);

    w2_V_we0_assign_proc : process(ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            w2_V_we0 <= ap_const_logic_1;
        else 
            w2_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    w2_V_we1_assign_proc : process(ap_CS_fsm_state10)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            w2_V_we1 <= ap_const_logic_1;
        else 
            w2_V_we1 <= ap_const_logic_0;
        end if; 
    end process;


    w4_V_address0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state7, ap_CS_fsm_state9, grp_dense_latency_ap_fixed_ap_fixed_config4_0_0_fu_241_w4_V_address0, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            w4_V_address0 <= ap_const_lv1_0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            w4_V_address0 <= grp_dense_latency_ap_fixed_ap_fixed_config4_0_0_fu_241_w4_V_address0;
        else 
            w4_V_address0 <= "X";
        end if; 
    end process;


    w4_V_address1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state7, ap_CS_fsm_state9, grp_dense_latency_ap_fixed_ap_fixed_config4_0_0_fu_241_w4_V_address1, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            w4_V_address1 <= ap_const_lv1_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            w4_V_address1 <= grp_dense_latency_ap_fixed_ap_fixed_config4_0_0_fu_241_w4_V_address1;
        else 
            w4_V_address1 <= "X";
        end if; 
    end process;


    w4_V_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state7, ap_CS_fsm_state9, grp_dense_latency_ap_fixed_ap_fixed_config4_0_0_fu_241_w4_V_ce0, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            w4_V_ce0 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            w4_V_ce0 <= grp_dense_latency_ap_fixed_ap_fixed_config4_0_0_fu_241_w4_V_ce0;
        else 
            w4_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    w4_V_ce1_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state7, ap_CS_fsm_state9, grp_dense_latency_ap_fixed_ap_fixed_config4_0_0_fu_241_w4_V_ce1, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            w4_V_ce1 <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            w4_V_ce1 <= grp_dense_latency_ap_fixed_ap_fixed_config4_0_0_fu_241_w4_V_ce1;
        else 
            w4_V_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    w4_V_d0 <= sub_ln1193_3_fu_1311_p2(20 downto 15);
    w4_V_d1 <= sub_ln1193_4_fu_1455_p2(20 downto 15);

    w4_V_we0_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            w4_V_we0 <= ap_const_logic_1;
        else 
            w4_V_we0 <= ap_const_logic_0;
        end if; 
    end process;


    w4_V_we1_assign_proc : process(ap_CS_fsm_state9)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            w4_V_we1 <= ap_const_logic_1;
        else 
            w4_V_we1 <= ap_const_logic_0;
        end if; 
    end process;

    xor_ln340_1_fu_341_p2 <= (p_Result_s_fu_303_p3 xor ap_const_lv1_1);
    xor_ln340_2_fu_418_p2 <= (p_Result_3_fu_398_p3 xor p_Result_2_fu_386_p3);
    xor_ln340_3_fu_424_p2 <= (p_Result_2_fu_386_p3 xor ap_const_lv1_1);
    xor_ln340_fu_335_p2 <= (p_Result_s_fu_303_p3 xor p_Result_1_fu_315_p3);
    xor_ln416_1_fu_811_p2 <= (tmp_9_fu_803_p3 xor ap_const_lv1_1);
    xor_ln416_2_fu_598_p2 <= (tmp_14_fu_590_p3 xor ap_const_lv1_1);
    xor_ln416_3_fu_640_p2 <= (p_Result_8_fu_572_p3 xor ap_const_lv1_1);
    xor_ln416_4_fu_1095_p2 <= (tmp_27_fu_1087_p3 xor ap_const_lv1_1);
    xor_ln416_fu_955_p2 <= (tmp_21_fu_947_p3 xor ap_const_lv1_1);
    xor_ln779_1_fu_634_p2 <= (tmp_17_fu_626_p3 xor ap_const_lv1_1);
    xor_ln779_2_fu_1018_p2 <= (tmp_23_fu_1011_p3 xor ap_const_lv1_1);
    xor_ln779_3_fu_1158_p2 <= (tmp_29_fu_1151_p3 xor ap_const_lv1_1);
    xor_ln779_fu_874_p2 <= (tmp_11_fu_867_p3 xor ap_const_lv1_1);
    xor_ln785_1_fu_480_p2 <= (p_Result_4_reg_1734 xor ap_const_lv1_1);
    xor_ln785_2_fu_664_p2 <= (carry_3_fu_604_p2 xor Range2_all_ones_2_fu_618_p3);
    xor_ln785_3_fu_676_p2 <= (p_Result_7_fu_550_p3 xor ap_const_lv1_1);
    xor_ln785_4_fu_1193_p2 <= (select_ln777_fu_1184_p3 xor ap_const_lv1_1);
    xor_ln785_5_fu_1204_p2 <= (tmp_18_reg_1774 xor ap_const_lv1_1);
    xor_ln785_6_fu_1337_p2 <= (select_ln777_1_fu_1328_p3 xor ap_const_lv1_1);
    xor_ln785_7_fu_1348_p2 <= (tmp_24_reg_1814 xor ap_const_lv1_1);
    xor_ln785_fu_469_p2 <= (deleted_zeros_fu_460_p3 xor ap_const_lv1_1);
    xor_ln786_1_fu_406_p2 <= (p_Result_3_fu_398_p3 xor ap_const_lv1_1);
    xor_ln786_2_fu_496_p2 <= (or_ln786_fu_491_p2 xor ap_const_lv1_1);
    xor_ln786_3_fu_706_p2 <= (or_ln786_1_fu_700_p2 xor ap_const_lv1_1);
    xor_ln786_4_fu_1220_p2 <= (or_ln786_2_fu_1215_p2 xor ap_const_lv1_1);
    xor_ln786_5_fu_1364_p2 <= (or_ln786_3_fu_1359_p2 xor ap_const_lv1_1);
    xor_ln786_fu_323_p2 <= (p_Result_1_fu_315_p3 xor ap_const_lv1_1);
    zext_ln415_1_fu_580_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(trunc_ln1118_fu_546_p1),16));
    zext_ln415_2_fu_937_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_20_fu_930_p3),16));
    zext_ln415_3_fu_1077_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_26_fu_1070_p3),16));
    zext_ln415_fu_793_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_8_fu_786_p3),16));
end behav;
