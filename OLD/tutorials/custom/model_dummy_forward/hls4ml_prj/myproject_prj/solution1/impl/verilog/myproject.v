// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="myproject,hls_ip_2019_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=1,HLS_INPUT_PART=xcu250-figd2104-2L-e,HLS_INPUT_CLOCK=5.000000,HLS_INPUT_ARCH=pipeline,HLS_SYN_CLOCK=0.000000,HLS_SYN_LAT=0,HLS_SYN_TPT=1,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=18,HLS_SYN_LUT=38,HLS_VERSION=2019_2}" *)

module myproject (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        fc1_input_V,
        fc1_input_V_ap_vld,
        layer3_out_0_V,
        layer3_out_0_V_ap_vld,
        const_size_in_1,
        const_size_in_1_ap_vld,
        const_size_out_1,
        const_size_out_1_ap_vld
);

parameter    ap_ST_fsm_state1 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [15:0] fc1_input_V;
input   fc1_input_V_ap_vld;
output  [15:0] layer3_out_0_V;
output   layer3_out_0_V_ap_vld;
output  [15:0] const_size_in_1;
output   const_size_in_1_ap_vld;
output  [15:0] const_size_out_1;
output   const_size_out_1_ap_vld;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg layer3_out_0_V_ap_vld;
reg const_size_in_1_ap_vld;
reg const_size_out_1_ap_vld;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [15:0] fc1_input_V_preg;
reg   [15:0] fc1_input_V_in_sig;
reg    fc1_input_V_ap_vld_preg;
reg    fc1_input_V_ap_vld_in_sig;
reg    fc1_input_V_blk_n;
wire    layer2_out_0_V_dense_latency_ap_fixed_ap_fixed_config2_0_0_fu_69_ap_ready;
wire   [14:0] layer2_out_0_V_dense_latency_ap_fixed_ap_fixed_config2_0_0_fu_69_ap_return;
wire    call_ret6_linear_ap_fixed_ap_fixed_16_6_0_0_0_linear_config3_s_fu_75_ap_ready;
wire   [14:0] call_ret6_linear_ap_fixed_ap_fixed_16_6_0_0_0_linear_config3_s_fu_75_ap_return;
reg    ap_block_state1;
reg   [0:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 fc1_input_V_preg = 16'd0;
#0 fc1_input_V_ap_vld_preg = 1'b0;
end

dense_latency_ap_fixed_ap_fixed_config2_0_0 layer2_out_0_V_dense_latency_ap_fixed_ap_fixed_config2_0_0_fu_69(
    .ap_ready(layer2_out_0_V_dense_latency_ap_fixed_ap_fixed_config2_0_0_fu_69_ap_ready),
    .data_V_read(fc1_input_V_in_sig),
    .ap_return(layer2_out_0_V_dense_latency_ap_fixed_ap_fixed_config2_0_0_fu_69_ap_return)
);

linear_ap_fixed_ap_fixed_16_6_0_0_0_linear_config3_s call_ret6_linear_ap_fixed_ap_fixed_16_6_0_0_0_linear_config3_s_fu_75(
    .ap_ready(call_ret6_linear_ap_fixed_ap_fixed_16_6_0_0_0_linear_config3_s_fu_75_ap_ready),
    .data_V_read(layer2_out_0_V_dense_latency_ap_fixed_ap_fixed_config2_0_0_fu_69_ap_return),
    .ap_return(call_ret6_linear_ap_fixed_ap_fixed_16_6_0_0_0_linear_config3_s_fu_75_ap_return)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        fc1_input_V_ap_vld_preg <= 1'b0;
    end else begin
        if ((~((ap_start == 1'b0) | (fc1_input_V_ap_vld_in_sig == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
            fc1_input_V_ap_vld_preg <= 1'b0;
        end else if ((~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (fc1_input_V_ap_vld == 1'b1))) begin
            fc1_input_V_ap_vld_preg <= fc1_input_V_ap_vld;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        fc1_input_V_preg <= 16'd0;
    end else begin
        if ((~((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) & (fc1_input_V_ap_vld == 1'b1))) begin
            fc1_input_V_preg <= fc1_input_V;
        end
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (fc1_input_V_ap_vld_in_sig == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (fc1_input_V_ap_vld_in_sig == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (fc1_input_V_ap_vld_in_sig == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        const_size_in_1_ap_vld = 1'b1;
    end else begin
        const_size_in_1_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (fc1_input_V_ap_vld_in_sig == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        const_size_out_1_ap_vld = 1'b1;
    end else begin
        const_size_out_1_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((fc1_input_V_ap_vld == 1'b1)) begin
        fc1_input_V_ap_vld_in_sig = fc1_input_V_ap_vld;
    end else begin
        fc1_input_V_ap_vld_in_sig = fc1_input_V_ap_vld_preg;
    end
end

always @ (*) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        fc1_input_V_blk_n = fc1_input_V_ap_vld;
    end else begin
        fc1_input_V_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((fc1_input_V_ap_vld == 1'b1)) begin
        fc1_input_V_in_sig = fc1_input_V;
    end else begin
        fc1_input_V_in_sig = fc1_input_V_preg;
    end
end

always @ (*) begin
    if ((~((ap_start == 1'b0) | (fc1_input_V_ap_vld_in_sig == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        layer3_out_0_V_ap_vld = 1'b1;
    end else begin
        layer3_out_0_V_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

always @ (*) begin
    ap_block_state1 = ((ap_start == 1'b0) | (fc1_input_V_ap_vld_in_sig == 1'b0));
end

assign const_size_in_1 = 16'd1;

assign const_size_out_1 = 16'd1;

assign layer3_out_0_V = $signed(call_ret6_linear_ap_fixed_ap_fixed_16_6_0_0_0_linear_config3_s_fu_75_ap_return);

endmodule //myproject
